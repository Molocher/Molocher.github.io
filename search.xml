<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java内置锁原理</title>
      <link href="/2023/04/11/java-nei-zhi-suo-yuan-li/"/>
      <url>/2023/04/11/java-nei-zhi-suo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内置锁的核心原理"><a href="#Java内置锁的核心原理" class="headerlink" title="Java内置锁的核心原理"></a>Java内置锁的核心原理</h2><p>Java中每个对象都可以用作锁，这些锁称为内置锁。线程进入同步代码块或方法时会自动获得该锁，在退出同步代码块或方法时会释放锁。</p><p>Java内置锁是一个互斥锁，这就意味着最多只有一个线程能够获得该锁。</p><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p>当多个线程并发访问某个Java对象时，无论系统如何调度这些线程，也无论这些线程将如何交替操作，这个对象都能表现出一致的、正确的行为，那么对这个对象的操作就是线程安全的</p><ul><li><p>自增运算(++)不是线程安全的</p><p>一个自增运算符是一个复合操作，至少包括三个JVM指令：内存取值、寄存器增加1、存值到内存。这三个指令在JVM内部是独立进行的，中间完全可能会出现多个线程并发进行</p></li><li><p>临界区资源与临界区代码段</p><p>临界区资源表示一种可以被多个线程使用的公共资源或共享数据，但是每一次只能有一个线程使用它。一旦临界区资源被占用，想使用该资源的其他线程则必须等待。</p><p>在并发情况下，临界区资源是受保护的对象。临界区代码段是每个线程中访问临界资源的那段代码，多个线程必须互斥地对临界资源进行访问。</p></li></ul><h3 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h3><p>Java中，线程同步使用最多的方法是使用synchronized关键字。每个Java对象都隐含一把锁，这里称为Java内置锁或者对象锁。使用synchronized调用相当于获取对象的内置锁，可以使用内置锁对临界区代码段进行排他性保护。</p><ul><li><p>synchronized同步方法</p><p>使用synchronized关键字修饰一个方法时，该方法被声明为同步方法</p></li><li><p>synchronized同步块</p><p>将synchronized关键字放在函数体内，同步一个代码块</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">sychronized</span><span class="token punctuation">(</span>syncObject<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//同步块而不是方法</span>    <span class="token comment">// 临界区代码段的代码块</span><span class="token punctuation">}</span></code></pre></li><li><p>静态的同步方法</p><p>使用synchronized关键字修饰static方法时，synchronized的同步锁不是普通的Object对象的监视锁，而是类锁对应的Class对象的监视锁</p><p>使用类锁作为synchronized的同步锁时会造成同一个JVM内的所有线程只能互斥地进入临界区段</p></li></ul><h3 id="Java对象结构"><a href="#Java对象结构" class="headerlink" title="Java对象结构"></a>Java对象结构</h3><p>Java对象结构包括三部分：对象头、对象体和对齐字节，如图所示</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411113008654.png" class="" title="image-20230411113008654"><ul><li><p>对象头</p><p>对象头包括三个字段</p><ul><li>Mark Word:标记字用于存储自身运行时数据，GC标志位、哈希码、锁状态</li><li>Class Pointer:类对象指针，用于存放方法区Class对象的地址，虚拟机通过这个指针来确定这个对象是哪个类的实例</li><li>Array Length:数组长度，如果对象是一个Java数组，这个字段必须有，用于记录数组长度的数据，如果对象不是一个Java数组，这个字段不存在</li></ul></li><li><p>对象体</p><p>包含对象的实例变量，用于成员属性值，包括父类的成员属性值。这部分内存按4字节对齐</p></li><li><p>对齐字节</p><p>也叫作填充对齐，作用是保证Java对象所占内存字节数为8的倍数，HotSpot VM的内存管理要求对象起始地址必须是8字节的整数倍。</p></li></ul><p>Mark Word、Class Pointer、Array Length等字段的长度都与JVM的位数有关。</p><p>Mark Word的长度为JVM的一个Word（字）大小，也就是说32位JVM的Mark Word为32位，64位JVM的Mark Word为64位。</p><p>Class Pointer（类对象指针）字段的长度也为JVM的一个Word（字）大小，即32位JVM的Mark Word为32位，64位JVM的Mark Word为64位。</p><p>所以，在32位JVM虚拟机中，Mark Word和Class Pointer这两部分都是32位的；在64位JVM虚拟机中，Mark Word和Class Pointer这两部分都是64位的。</p><p>对于对象指针而言，如果JVM中的对象数量过多，使用64位的指针将浪费大量内存，通过简单统计，64位JVM将会比32位JVM多耗费50%的内存。</p><p>为了节约内存可以使用选项+UseCompressedOops开启指针压缩。UseCompressedOops中的Oop为Ordinary object pointer（普通对象指针）的缩写。</p><p><strong>说明：</strong>在堆内存小于32G的情况下，64位虚拟机的UseCompressedOops选项是默认开启的。</p><h4 id="Mark-Word的结构信息"><a href="#Mark-Word的结构信息" class="headerlink" title="Mark Word的结构信息"></a>Mark Word的结构信息</h4><p>JDK1.6之前，Java内置锁是一个重量级锁，是一个效率比较低下的锁</p><p>JDK1.6之后，JVM为了提高锁的获取和释放效率，对synchronized的实现进行了优化，引入了偏向锁和轻量级锁，此后Java内置锁的状态就有了4种</p><ul><li>无锁</li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li></ul><p>4中状态会随着竞争的情况逐渐升级，而且是不可逆的过程。</p><p>不同锁状态下Mark Word字段结构</p><p>JVM将Mark Word最低两位设置为Java内置锁状态位</p><ul><li><p>不同锁状态下32位Mark Word的结构信息</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411115143071.png" class="" title="image-20230411115143071"></li><li><p>不同锁状态下64位Mark Word的结构信息</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411115306110.png" class="" title="image-20230411115306110"></li><li><p>lock:锁状态标记位，占两个二进制位</p></li><li><p>biased_lock:对象是否启用偏向锁标记，只占1个二进制位。1表示对象启用偏向锁，0表示对象没有偏向锁</p></li><li><p>lock和biased_lock组合起来表示锁状态</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411115654973.png" class="" title="image-20230411115654973"></li><li><p>age:4位的Java对象分代年龄。在GC中，对象在Survivor区复制一次，年龄就增加1.</p></li><li><p>identity_hashcode:31位的对象标识HashCode。采用延迟加载技术，当调用Object.hashCode()方法或者System.identityHashCode()方法计算对象的HashCode后，其结果将被写到该对象头中。如果调用重写的hashcode()方法不会记录到Mark Word。当对象被锁定时，该值会移动到Monitor（监视器）中</p></li><li><p>thread:54位的线程ID值为持有偏向锁的线程ID</p></li><li><p>epoch:偏向时间戳</p></li><li><p>ptr_to_lock_record:62位，在轻量级锁的状态下指向栈帧中锁记录的指针</p></li><li><p>ptr_to_heavyweight_monitor:62位，在重量级锁的状态下指向对象监视器的指针</p></li></ul><h4 id="使用JOL工具查看对象的布局"><a href="#使用JOL工具查看对象的布局" class="headerlink" title="使用JOL工具查看对象的布局"></a>使用JOL工具查看对象的布局</h4><ol><li><p>引入Maven的依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Java Object Layout --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>创建一个等待进行对象布局分析的ObjectLock</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java_lock</span><span class="token punctuation">;</span><span class="token comment">// 省略import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> amount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//整型字段占用4字节</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            amount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 输出十六进制、小端模式的hashCode     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hexHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//对象的原始 hashCode，Java默认为大端模式</span>        <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成小端模式的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashCode_LE <span class="token operator">=</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">int2Bytes_LE</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成十六进制形式的字符串</span>        <span class="token keyword">return</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">byteToHex</span><span class="token punctuation">(</span>hashCode_LE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 输出二进制、小端模式的hashCode     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">binaryHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//对象的原始 hashCode，Java默认为大端模式</span>        <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成小端模式的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashCode_LE <span class="token operator">=</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">int2Bytes_LE</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token operator">:</span>hashCode_LE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//转成二进制形式的字符串</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">byte2BinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 输出十六进制、小端模式的ThreadId     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hexThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//当前线程的 threadID，Java默认为大端模式</span>        <span class="token keyword">long</span> threadID <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成小端模式的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threadID_LE <span class="token operator">=</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">long2bytes_LE</span><span class="token punctuation">(</span>threadID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成十六进制形式的字符串</span>        <span class="token keyword">return</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">byteToHex</span><span class="token punctuation">(</span>threadID_LE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 输出二进制、小端模式的ThreadId     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">binaryThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//当前线程的 threadID，Java默认为大端模式</span>        <span class="token keyword">long</span> threadID <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成小端模式的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threadID_LE <span class="token operator">=</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">long2bytes_LE</span><span class="token punctuation">(</span>threadID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token operator">:</span>threadID_LE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//转成二进制形式的字符串</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> <span class="token class-name">ByteUtil</span><span class="token punctuation">.</span><span class="token function">byte2BinaryString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 输出十六进制、小端模式的hashCode</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lock hexHash= "</span> <span class="token operator">+</span> <span class="token function">hexHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出二进制、小端模式的hashCode</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lock binaryHash= "</span> <span class="token operator">+</span> <span class="token function">binaryHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过JOL工具获取this的对象布局</span>        <span class="token class-name">String</span> printable <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出对象布局</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lock = "</span> <span class="token operator">+</span> printable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 省略其他</span><span class="token punctuation">}</span></code></pre><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectLock</span> objectLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectLock<span class="token punctuation">.</span><span class="token function">printSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class="language-java" data-language="java"><code class="language-java">lock hexHash<span class="token operator">=</span> f0 ce b4 <span class="token number">36</span> lock binaryHash<span class="token operator">=</span> <span class="token number">11110000</span> <span class="token number">11001110</span> <span class="token number">10110100</span> <span class="token number">00110110</span> lock <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java_lock<span class="token punctuation">.</span></span>ObjectLock</span> object internals<span class="token operator">:</span> <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>                <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>      <span class="token number">0</span>     <span class="token number">4</span>                     <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> f0 ce b4 <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">11110000</span> <span class="token number">11001110</span> <span class="token number">10110100</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1261506559</span><span class="token punctuation">)</span>      <span class="token number">4</span>     <span class="token number">4</span>                     <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">36</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00110110</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span>      <span class="token number">8</span>     <span class="token number">4</span>                     <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">60</span> dc c1 <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">01100000</span> <span class="token number">11011100</span> <span class="token number">11000001</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12704864</span><span class="token punctuation">)</span>     <span class="token number">12</span>     <span class="token number">4</span>   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">.</span>amount                         <span class="token number">0</span><span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">0</span> bytes external <span class="token operator">=</span> <span class="token number">0</span> bytes total</code></pre></li></ol><h3 id="无锁、偏向锁、轻量级锁、重量级锁"><a href="#无锁、偏向锁、轻量级锁、重量级锁" class="headerlink" title="无锁、偏向锁、轻量级锁、重量级锁"></a>无锁、偏向锁、轻量级锁、重量级锁</h3><ol><li><p>无锁状态</p><p>对象刚创建时还没有任何线程来竞争，说明该对象处于无锁状态，这时偏向锁标识位是0，锁状态时01</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411134045858.png" class="" title="image-20230411134045858"></li><li><p>偏向锁状态</p><p>偏向锁是指一段同步代码一直被同一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>偏向锁状态的Mark Word会记录内置锁自己偏爱的线程ID，内置锁会将该线程当做自己的熟人。</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411134330309.png" class="" title="image-20230411134330309"></li><li><p>轻量级锁状态</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411134608106.png" class="" title="image-20230411134608106"><p>当锁处于偏向锁，又被另一个线程企图抢占时，偏向锁就会升级为轻量级锁。企图抢占的线程会通过自旋的形式尝试获取锁，不会阻塞抢锁线程，以便提高性能。</p><p>自旋原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要进行内核态和用户态之间的切换来进入阻塞挂起状态，它们只需要等持有锁的线程释放锁后即可立即获取锁，这样就避免了用户线程和内核切换的消耗。</p><p>线程自旋是需要消耗CPU的，如果一直获取不到锁，那么线程也不能一直占用CPU自旋做无用功，所以需要设定一个自旋等待的最大时间。JVM对于自旋周期的选择，JDK 1.6之后引入了适应性自旋锁，适应性自旋锁意味着自旋的时间不是固定的，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定的。线程如果自旋成功了，下次自旋的次数就会更多，如果自旋失败了，自旋的次数就会减少。</p><p>如果持有锁的线程执行的时间超过自旋等待的最大时间仍没有释放锁，就会导致其他争用锁的线程在最大等待时间内还是获取不到锁，自旋不会一直持续下去，这时争用线程会停止自旋进入阻塞状态，该锁膨胀为重量级锁。</p></li><li><p>重量级锁状态</p><p>重量级锁会让其他申请的线程之间进入阻塞，性能降低。重量级锁也叫同步锁，这个锁对象Mark Word再次发生变化，会指向一个监视器对象</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411135111524.png" class="" title="image-20230411135111524"></li></ol><h3 id="偏向锁的原理和实践"><a href="#偏向锁的原理和实践" class="headerlink" title="偏向锁的原理和实践"></a>偏向锁的原理和实践</h3><p>偏向锁的核心原理是：如果不存在线程竞争的一个线程获得了锁，那么锁就进入偏向状态，此时Mark Word的结构变为偏向锁结构，锁对象的锁标志位（lock）被改为01，偏向标志位（biased_lock）被改为1，然后线程的ID记录在锁对象的Mark Word中（使用CAS操作完成）。以后该线程获取锁时判断一下线程ID和标志位，就可以直接进入同步块，连CAS操作都不需要，这样就省去了大量有关锁申请的操作，从而也就提升了程序的性能。</p><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showBiasedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JVM延迟偏向锁,JVM在启动的时候会延迟启用偏向锁机制，默认把偏向锁延迟了4000毫秒</span>    <span class="token comment">// 通过JVM启动选项禁止偏向锁延迟</span>    <span class="token comment">// -XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"抢占锁前, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_TURN</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token constant">MAX_TURN</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"占有锁, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//读取字符串型输入,阻塞线程</span><span class="token comment">//                        Print.consoleInput();</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">//每一次循环等待10ms</span>                <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"biased-demo-thread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等待加锁线程执行完成</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"释放锁后, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="偏向锁的膨胀和撤销"><a href="#偏向锁的膨胀和撤销" class="headerlink" title="偏向锁的膨胀和撤销"></a>偏向锁的膨胀和撤销</h4><ol><li><p>偏向锁撤销，大概过程如下</p><ol><li>在一个安全点停止拥有锁的线程</li><li>遍历线程的栈帧，检查是否存在锁记录。如果存在锁记录，就需要清空锁记录，使其变成无锁状态，并修复锁记录指向的Mark Word，清除其线程ID</li><li>将当前锁升级成轻量级锁</li><li>唤醒当前线程</li></ol></li><li><p>偏向锁撤销的条件：</p><ol><li>多个线程竞争偏向锁</li><li>调用偏向锁对象的hashcode()方法或者System.identityHashCode()方法计算对象的HashCode之后，将哈希码放置到Mark Word中，内置锁变成无锁状态，偏向锁将被撤销</li></ol></li><li><p>偏向锁膨胀</p><p>如果偏向锁被占据，一旦有第二个线程争抢这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到内置锁偏向状态，这时表明在这个对象锁上已经存在竞争了。JVM检查原来持有该对象锁的占有线程是否依然存活，如果挂了，就可以将对象变为无锁状态，然后进行重新偏向，偏向为抢锁线程。</p><p>如果JVM检查到原来的线程依然存活，就进一步检查占有线程的调用堆栈是否通过锁记录持有偏向锁。如果存在锁记录，就表明原来的线程还在使用偏向锁，发生锁竞争，撤销原来的偏向锁，将偏向锁膨胀（INFLATING）为轻量级锁。</p></li></ol><h3 id="轻量级锁的原理和实战"><a href="#轻量级锁的原理和实战" class="headerlink" title="轻量级锁的原理和实战"></a>轻量级锁的原理和实战</h3><p>引入轻量级锁的主要目的是在多线程竞争不激烈的情况下，通过CAS机制竞争锁减少重量级锁产生的性能损耗。重量级锁使用了操作系统底层的互斥锁（Mutex Lock），会导致线程在用户态和核心态之间频繁切换，从而带来较大的性能损耗</p><p>轻量级锁的执行过程：在抢锁线程进入临界区之前，如果内置锁（临界区的同步对象）没有被锁定，JVM首先将在抢锁线程的栈帧中建立一个锁记录（Lock Record），用于存储对象目前Mark Word的拷贝，这时的线程堆栈与内置锁对象头大致如图所示</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411141355043.png" class="" title="image-20230411141355043"><p>然后抢锁线程将使用CAS自旋操作，尝试将内置锁对象头的Mark Word的ptr_to_lock_record（锁记录指针）更新为抢锁线程栈帧中锁记录的地址，如果这个更新执行成功了，这个线程就拥有了这个对象锁。然后JVM将Mark Word中的lock标记位改为00（轻量级锁标志），即表示该对象处于轻量级锁状态。抢锁成功之后，JVM会将Mark Word中原来的锁对象信息（如哈希码等）保存在抢锁线程锁记录的Displaced Mark Word（可以理解为放错地方的Mark Word）字段中，再将抢锁线程中锁记录的owner指针指向锁对象。在轻量级锁抢占成功之后，锁记录和对象头的状态如图所示</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411141523734.png" class="" title="image-20230411141523734"><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLightweightLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JVM延迟偏向锁</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"抢占锁前, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_TURN</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"第一个线程占有锁, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//循环完毕</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//线程虽然释放锁，但是一直存在</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//每一次循环等待1ms</span>                <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待1s</span>        <span class="token class-name">Runnable</span> lightweightRunnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_TURN</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token constant">MAX_TURN</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"第二个线程占有锁, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">//每一次循环等待1ms</span>                    <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//循环完毕</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lightweightRunnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等待加锁线程执行完成</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待2s</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"释放锁后, lock 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>轻量级锁主要有两种：普通自旋锁和自适应自旋锁</p><ol><li><p>普通自旋锁</p><p>锁在原地循环等待的时候是会消耗CPU的，就相当于在执行一个什么也不干的空循环。所以轻量级锁适用于临界区代码耗时很短的场景，这样线程在原地等待很短的时间就能够获得锁了。</p><p>默认情况下，自旋的次数为10次，用户可以通过-XX:PreBlockSpin选项来进行更改。</p></li><li><p>自适应自旋锁</p><p>大概原理</p><ul><li>锁在原地循环等待的时候是会消耗CPU的，就相当于在执行一个什么也不干的空循环。所以轻量级锁适用于临界区代码耗时很短的场景，这样线程在原地等待很短的时间就能够获得锁了。默认情况下，自旋的次数为10次，用户可以通过-XX:PreBlockSpin选项来进行更改。</li><li>锁在原地循环等待的时候是会消耗CPU的，就相当于在执行一个什么也不干的空循环。所以轻量级锁适用于临界区代码耗时很短的场景，这样线程在原地等待很短的时间就能够获得锁了。默认情况下，自旋的次数为10次，用户可以通过-XX:PreBlockSpin选项来进行更改。</li></ul><p>JDK 1.6的轻量级锁使用的是普通自旋锁，且需要使用-XX:+UseSpinning选项手工开启。JDK 1.7后，轻量级锁使用自适应自旋锁，JVM启动时自动开启，且自旋时间由JVM自动控制。轻量级锁也被称为非阻塞同步、乐观锁，因为这个过程并没有把线程阻塞挂起，而是让线程空循环等待。</p></li></ol><h3 id="重量级锁的原理和实战"><a href="#重量级锁的原理和实战" class="headerlink" title="重量级锁的原理和实战"></a>重量级锁的原理和实战</h3><p>JVM中每个对象都会有一个监视器，监视器和对象一起创建、销毁。其义务是保证同一时间只有一个线程可以访问被保护的临界区代码块</p><p>监视器是由C++类ObjectMonitor实现的，类中属性值Cxq、EntryList、WaitSet三个队列</p><ul><li>Cxq:竞争队列，所有请求锁的线程首先被放到这个竞争队列中</li><li>EntryList:Cxq中那些有资格成为候选资源的线程被移动到EntryList中</li><li>WaitSet:某个拥有ObjectMonitor的线程在调用Object.wait()方法之后将被阻塞，然后该线程被放置在WaitSet链表中</li></ul><p>内部抢锁过程</p><img src="/2023/04/11/java-nei-zhi-suo-yuan-li/image-20230411150814657.png" class="" title="image-20230411150814657"><h4 id="重量级锁的开销"><a href="#重量级锁的开销" class="headerlink" title="重量级锁的开销"></a>重量级锁的开销</h4><p>线程的阻塞或者唤醒都需要操作系统来帮忙，Linux内核下采用pthread_mutex_lock系统调用实现，进程需要从用户态切换到内核态</p><p>进程从用户态到内核态切换主要包括以下三种方式</p><ul><li>硬件中断</li><li>系统调用</li><li>异常</li></ul><p>测试代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHeavyweightLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JVM延迟偏向锁</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectLock</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"抢占锁前, counter 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counter<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_TURN</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"第一个线程占有锁, counter 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        counter<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//循环完毕</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//线程虽然释放锁，但是一直存在</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//每一次循环等待1ms</span>                <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待2s</span>        <span class="token class-name">Runnable</span> lightweightRunnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_TURN</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"占有锁, counter 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        counter<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">//每一次循环等待10ms</span>                    <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//循环完毕</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lightweightRunnable<span class="token punctuation">,</span> <span class="token string">"抢锁线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待2s</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lightweightRunnable<span class="token punctuation">,</span> <span class="token string">"抢锁线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等待加锁线程执行完成</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleepMilliSeconds</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待2s</span>        <span class="token class-name">Print</span><span class="token punctuation">.</span><span class="token function">tcfo</span><span class="token punctuation">(</span><span class="token string">"释放锁后, counter 的状态: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counter<span class="token punctuation">.</span><span class="token function">printObjectStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下synchronized的执行过程，大致如下：</p><ol><li>线程抢锁时，JVM首先检测内置锁对象Mark Word中的biased_lock（偏向锁标识）是否设置成1，lock（锁标志位）是否为01，如果都满足，确认内置锁对象为可偏向状态。</li><li>在内置锁对象确认为可偏向状态之后，JVM检查Mark Word中的线程ID是否为抢锁线程ID，如果是，就表示抢锁线程处于偏向锁状态，抢锁线程快速获得锁，开始执行临界区代码。</li><li>如果Mark Word中的线程ID并未指向抢锁线程，就通过CAS操作竞争锁。如果竞争成功，就将Mark Word中的线程ID设置为抢锁线程，偏向标志位设置为1，锁标志位设置为01，然后执行临界区代码，此时内置锁对象处于偏向锁状态。</li><li>如果CAS操作竞争失败，就说明发生了竞争，撤销偏向锁，进而升级为轻量级锁。</li><li>JVM使用CAS将锁对象的Mark Word替换为抢锁线程的锁记录指针，如果成功，抢锁线程就获得锁。如果替换失败，就表示其他线程竞争锁，JVM尝试使用CAS自旋替换抢锁线程的锁记录指针，如果自旋成功（抢锁成功），那么锁对象依然处于轻量级锁状态。</li><li>如果JVM的CAS替换锁记录指针自旋失败，轻量级锁就膨胀为重量级锁，后面等待锁的线程也要进入阻塞状态。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal原理</title>
      <link href="/2023/04/10/threadlocal-yuan-li/"/>
      <url>/2023/04/10/threadlocal-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="ThreadLocal原理与实战"><a href="#ThreadLocal原理与实战" class="headerlink" title="ThreadLocal原理与实战"></a>ThreadLocal原理与实战</h2><p>ThreadLocal如何做到为每个线程存有一份独立的本地值呢？</p><p>一个ThreadLocal实例可以形象地理解为一个Map。当工作线程Thread实例向本地变量保存某个值时，会以“Key-Value”的形式保存在ThreadLocal内部的Map中，其中Key为线程Thread实例，Value为待保存的值。</p><p>运行示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 省略import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span>    <span class="token punctuation">{</span>        <span class="token comment">//实例总数</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">AMOUNT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象的编号</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//对象的内容</span>        <span class="token keyword">int</span> bar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//构造器</span>        <span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            index <span class="token operator">=</span> <span class="token constant">AMOUNT</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//总数增加，并且给对象编号</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token string">"@Foo{bar="</span> <span class="token operator">+</span> bar <span class="token operator">+</span> <span class="token char">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//定义线程本地变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOCAL_FOO</span> <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>    <span class="token punctuation">{</span>        <span class="token comment">//获取自定义的混合型线程池</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//提交5个任务，将会用到5个线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment">//获取“线程本地变量”中当前线程所绑定的值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment">//设置“线程本地变量”中当前线程所绑定的值</span>                        <span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"初始的本地值："</span> <span class="token operator">+</span> <span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//每个线程执行10次</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token class-name">Foo</span> foo <span class="token operator">=</span> <span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        foo<span class="token punctuation">.</span><span class="token function">setBar</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//值增1</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"累加10次之后的本地值："</span> <span class="token operator">+</span> <span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//删除“线程本地变量”中当前线程所绑定的值</span>                    <span class="token constant">LOCAL_FOO</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这点对于线程池中的线程尤其重要</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其结果如下：</p><pre class="language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>初始的本地值：<span class="token number">3</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span>初始的本地值：<span class="token number">2</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>初始的本地值：<span class="token number">1</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span>初始的本地值：<span class="token number">5</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>初始的本地值：<span class="token number">4</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span>累加<span class="token number">10</span>次之后的本地值：<span class="token number">2</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>累加<span class="token number">10</span>次之后的本地值：<span class="token number">1</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span>累加<span class="token number">10</span>次之后的本地值：<span class="token number">5</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>累加<span class="token number">10</span>次之后的本地值：<span class="token number">3</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>累加<span class="token number">10</span>次之后的本地值：<span class="token number">4</span><span class="token annotation punctuation">@Foo</span><span class="token punctuation">{</span>bar<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span></code></pre><p>在线程本地变量LOCAL_FOO中，每一个线程都绑定了一个独立的值，这些值对象是线程的私有财产，可以理解为线程的本地值，线程的每一次操作都是在自己的同一个本地值上进行。</p><h3 id="ThreadLocal的使用场景"><a href="#ThreadLocal的使用场景" class="headerlink" title="ThreadLocal的使用场景"></a>ThreadLocal的使用场景</h3><p>大致可以分为以下两类：</p><ul><li><p>线程隔离</p><p>ThreadLocal中的数据只属于当前线程，其本地值对别的线程是不可见的，在多线程环境中，可以防止自己的变量被其他线程篡改。</p><p>常见的使用场景为数据库连接独享、Session数据管理</p><p>典型应用为数据库连接独享，下面代码是Hibernate，通过ThreadLocal进行数据库连接的线程本地化存储</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span> threadSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Session</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InfrastructureException</span> <span class="token punctuation">{</span>      <span class="token class-name">Session</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Session</span><span class="token punctuation">)</span> threadSession<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threadSession<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HibernateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InfrastructureException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> s<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>跨函数传递数据</p><p>通常用于一个线程内，跨类、跨方法传递数据。</p><p>典型应用：</p><ul><li>用来传递请求过程中的用户ID</li><li>用来传递请求过程中的用户会话</li><li>用来传递HTTP的用户请求实例HttpRequest</li><li>其他需要在函数之间频繁传递的数据</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 省略import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionHolder</span><span class="token punctuation">{</span>    <span class="token comment">// session id，线程本地变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sidLocal <span class="token operator">=</span>                                          <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"sidLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用户信息，线程本地变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> sessionUserLocal <span class="token operator">=</span>                                           <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"sessionUserLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// session，线程本地变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpSession</span><span class="token punctuation">&gt;</span></span> sessionLocal <span class="token operator">=</span>                                               <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"sessionLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 省略其他  </span>    <span class="token comment">/**     *保存session在线程本地变量中      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setSession</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sessionLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 取得绑定在线程本地变量中的session       */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> sessionLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">"session未设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 省略其他  </span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="ThreadLocal内部结构"><a href="#ThreadLocal内部结构" class="headerlink" title="ThreadLocal内部结构"></a>ThreadLocal内部结构</h3><p>在早期的JDK版本中，ThreadLocal的内部结构是一个Map，其中每一个线程实例作为Key，线程在“线程本地变量”中绑定的值为Value（本地值）。早期版本中的Map结构，其拥有者为ThreadLocal，每一个ThreadLocal实例拥有一个Map实例。</p><p>在JDK 8版本中，ThreadLocal的内部结构发生了演进，虽然还是使用了Map结构，但是Map结构的拥有者已经发生了变化，其拥有者为Thread（线程）实例，每一个Thread实例拥有一个Map实例。另外，Map结构的Key值也发生了变化：新的Key为ThreadLocal实例。</p><p>在JDK 8版本中，每一个Thread线程内部都有一个Map（ThreadLocalMap），如果给一个Thread创建多个ThreadLocal实例，然后放置本地数据，那么当前线程的ThreadLocalMap中就会有多个“Key-Value对”，其中ThreadLocal实例为Key，本地数据为Value。</p><h3 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h3><ul><li><p>set(T value)方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取当前线程对象</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前线程的ThreadLocalMap 成员</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断map是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token comment">//value被绑定到threadLocal实例</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment">// 如果当前线程没有ThreadLocalMap成员实例</span>        <span class="token comment">// 创建一个ThreadLocalMap实例，然后作为成员关联到t（thread实例）</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>       <span class="token comment">// 获取线程t的ThreadLocalMap成员</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 线程t创建一个ThreadLocalMap成员</span><span class="token comment">// 并为新的Map成员设置第一个“Key-Value对”，Key为当前的ThreadLocal实例</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>set方法的执行流程如下：</p><ol><li>获得当前线程，然后获得当前线程的ThreadLocalMap成员，暂存于map变量</li><li>如果map不为空，就将Value设置到map中，当前的ThreadLocal作为key</li><li>如果map为空，为该线程创建map，然后设置第一个Key-Value。Key为当前的ThreadLocal实例</li></ol></li><li><p>get()方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获得当前线程对象</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得线程对象的ThreadLocalMap 内部成员</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果当前线程的内部map成员存在</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 以当前ThreadLocal为Key，尝试获得条目</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 条目存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果当前线程对应的map不存在</span>    <span class="token comment">// 或者map存在，但是当前ThreadLocal实例没有对应的“Key-Value对”，返回初始值</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 设置ThreadLocal关联的初始值并返回</span><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 调用初始化钩子函数，获取初始值</span>    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>get方法的执行流程：</p><ol><li>先尝试获得当前线程，然后获得当前线程的ThreadLocalMap成员，暂存于map变量</li><li>如果获得的map不为空，那么以当前ThreadLocal实例为Key尝试获得map中的Entry</li><li>如果entry不为空，就返回Entry中的Value</li><li>如果Entry为空，就通过调用initialValue初始化钩子函数获取ThreadLocal初始值</li></ol></li><li><p>remove()方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>initialValue()方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>JDK已经定义了一个ThreadLocal的内部SuppliedThreadLocal静态子类，并且提供了ThreadLocal.withInitial(…)静态工厂方法，方便大家在定义ThreadLocal实例时设置初始值回调函数。使用工厂方法构造ThreadLocal实例的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOCAL_FOO</span> <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>JDK定义的ThreadLocal.withInitial(…)静态工厂方法及其内部子类SuppliedThreadLocal的源码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//ThreadLocal工厂方法可以设置本地变量初始值钩子函数</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">withInitial</span><span class="token punctuation">(</span>                             <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuppliedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">//内部静态子类</span> <span class="token comment">//继承了ThreadLocal，重写了initialValue()方法，返回钩子函数的值作为初始值</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SuppliedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>     <span class="token comment">//保存钩子函数</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">;</span>     <span class="token comment">//传入钩子函数</span>     <span class="token class-name">SuppliedThreadLocal</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>supplier <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>     <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回钩子函数的值作为初始值</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul><h3 id="ThreadLocalMap源码分析"><a href="#ThreadLocalMap源码分析" class="headerlink" title="ThreadLocalMap源码分析"></a>ThreadLocalMap源码分析</h3><ul><li><p>ThreadLocalMap的主要成员变量</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 省略其他</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>          <span class="token comment">// Map的条目数组，作为哈希表使用</span>        <span class="token keyword">private</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment">// Map的条目初始容量16</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// Map的条目数量 </span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 扩容因子</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>         <span class="token comment">// Map的条目类型，一个静态的内部类</span>        <span class="token comment">// Entry 继承子WeakReference, Key为ThreadLocal实例</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> value<span class="token punctuation">;</span> <span class="token comment">//条目的值</span>            <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token comment">// 省略其他</span><span class="token punctuation">}</span></code></pre></li><li><p>set(ThreadLocal&lt;?&gt; key,Object value)方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment">//根据key的HashCode，找到key在数组上的槽点i</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 从槽点i开始向后循环搜索，找空余槽点（空余位置）或者找现有槽点</span>        <span class="token comment">// 若没有现有槽点，则必定有空余槽点，因为没有空间时会扩容 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                                  e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//找到现有槽点：Key值为ThreadLocal实例</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//找到异常槽点：槽点被GC掉，重设Key值和Value值 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//没有找到现有的槽点，增加新的Entry</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置ThreadLocal数量</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>               <span class="token comment">//清理Key为null的无效Entry</span>        <span class="token comment">//没有可清理的Entry，并且现有条目数量大于扩容因子值，进行扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">&gt;=</span> threshold<span class="token punctuation">)</span>            <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Entry的key需要使用弱引用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Entry 继承了WeakReference，并使用WeakReference对Key进行包装</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span> <span class="token comment">//值</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用WeakReference对Key进行包装</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为什么Entry需要使用弱引用对Key进行包装，而不是直接使用ThreadLocal实例作为Key呢</p><p>这里从一个简单的例子入手，假设有一个方法funcA()创建了一个“线程本地变量”，具体如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//创建一个线程本地变量</span>    <span class="token class-name">ThreadLocal</span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置值</span>    local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取值</span>    local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//函数末尾</span><span class="token punctuation">}</span></code></pre><p>当线程tn执行funcA()方法到其末尾时，线程tn相关的JVM栈内存以及内部ThreadLocalMap成员的结构大致如图所示。</p><img src="/2023/04/10/threadlocal-yuan-li/image-20230410152140007-16811113017321.png" class="" title="image-20230410152140007"><p>线程tn调用funcA()方法新建了一个ThreadLocal实例，使用local局部变量指向这个实例，并且此local是强引用；在调用local.set(100)之后，线程tn的ThreadLocalMap成员内部会新建一个Entry实例，其Key以弱引用包装的方式指向ThreadLocal实例。</p><p>当线程tn执行完funcA()方法后，funcA()的方法栈帧将被销毁，强引用local的值也就没有了，但此时线程的ThreadLocalMap中对应的Entry的Key引用还指向ThreadLocal实例。如果Entry的Key引用是强引用，就会导致Key引用指向的ThreadLocal实例及其Value值都不能被GC回收，这将造成严重的内存泄漏问题，具体如图所示。</p><img src="/2023/04/10/threadlocal-yuan-li/image-20230410152324458-16811114101692.png" class="" title="image-20230410152324458"></li><li><p>编程规范推荐使用static final修饰ThreadLocal对象</p><p>使用完static、final修饰的ThreadLocal实例之后，必须调用remove()来进行显式的释放操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程原理</title>
      <link href="/2023/04/10/duo-xian-cheng-yuan-li/"/>
      <url>/2023/04/10/duo-xian-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程原理和实现"><a href="#多线程原理和实现" class="headerlink" title="多线程原理和实现"></a>多线程原理和实现</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li><p>进程：程序一次执行过程</p></li><li><p>线程：“进程代码段”的一次顺序执行流程，是CPU调度的最小单位。一个进程可以有一个或多个线程，各个线程之间共享进程的内存空间、系统资源，进程是操作系统资源分配的最小单位。</p><p>线程的组成</p><ul><li>线程描述信息：线程ID、线程名称、线程状态、线程优先级</li><li>程序计数器</li><li>栈内存</li></ul></li><li><p>区别：</p><ul><li>线程是进程代码段的一次顺序执行流程。一个进程由一个或多个线程组成，一个进程至少有一个线程</li><li>线程是CPU调度的最小单位，进程是操作系统分配资源的最小单位。线程的划分尺度小于进程，使多线程程序的并发性高</li><li>线程是出于高并发的调度诉求从进程内部演进而来的</li><li>进程之间是相互独立的，进程内部的各个线程之间并不完全独立。各个线程之间共享的方法区内存、堆内存、系统资源</li><li>切换速度不同：线程上下文切换比进程上下文切换要快的多，线程也称为轻量级进程</li></ul></li></ul><h2 id="创建线程的方法"><a href="#创建线程的方法" class="headerlink" title="创建线程的方法"></a>创建线程的方法</h2><ol><li><p>通过继承Thread类创建一个线程实例</p></li><li><p>实现Runnable接口创建线程目标类</p></li><li><p>使用Callable和FutureTask创建线程</p></li><li><p>通过线程池创建线程</p><ol><li><p>通过Executors工厂类创建一个线程池</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><h2 id="线程的核心原理"><a href="#线程的核心原理" class="headerlink" title="线程的核心原理"></a>线程的核心原理</h2><h3 id="线程调度模型"><a href="#线程调度模型" class="headerlink" title="线程调度模型"></a>线程调度模型</h3><ul><li><p>分时调度模型</p><p>系统平均分配CPU的时间片，所有线程轮流占用CPU</p></li><li><p>抢占式调度模型</p><p>系统按照线程优先级分配CPU时间片</p></li></ul><p>java的线程管理和调度是委托给操作系统完成的</p><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p>Java中线程的生命周期分为6中状态</p><ol><li><p>NEW:新建</p><p>创建成功但是没有调用start()方法启动的线程实例都处于NEW状态</p></li><li><p>RUNNABLE:可执行，包含操作系统的就绪、运行两种状态</p><p>在run()方法被异步调用前，JVM操作：Java中的线程管理是通过JNI本地调用的方式委托操作系统的线程管理API完成的。</p><p>就绪状态和运行状态都是操作系统中的线程状态，在Java语言中，没有细分这两种状态，而是将这两种状态合并成同一种状态</p></li><li><p>BLOCKED:阻塞</p></li><li><p>WAITING:等待</p></li><li><p>TIMED_WAITING:限时等待</p><p>能让线程处于限时等待状态的操作：</p><ol><li>Thread.sleep(int n)</li><li>Object.wait()</li><li>Thread.join()</li><li>LockSupport.parkNanos()</li><li>LockSupport.parkUntil()</li></ol></li><li><p>TERMINATED:终止</p><p>处于RUNNABLE状态的线程在run()方法执行完成以后就变成终止状态，异常终止也会变成终止状态。</p></li></ol><h3 id="使用Jstack工具查看线程状态"><a href="#使用Jstack工具查看线程状态" class="headerlink" title="使用Jstack工具查看线程状态"></a>使用Jstack工具查看线程状态</h3><p>jstack <pid> // pid表示Java进程id，可以用jps命令查看</pid></p><p>Jstack指令所输出的信息中包含以下重要信息</p><ol><li>tid:线程实例在JVM进程中的id</li><li>nid:线程实例在操作系统中对应的底层线程的线程id</li><li>prio:线程实例在JVM进程中的优先级</li><li>os_prio:线程实例在操作系统中对应的底层线程的优先级</li><li>线程状态：runnable、waiting on condition</li></ol><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><h3 id="Java线程的创建非常昂贵"><a href="#Java线程的创建非常昂贵" class="headerlink" title="Java线程的创建非常昂贵"></a>Java线程的创建非常昂贵</h3><ul><li>必须为线程堆栈分配和初始化大量内存块，包括至少1MB的栈内存</li><li>需要进行系统调用</li><li>高并发应用频繁创建和销毁线程的操作是非常低效的</li></ul><h3 id="线程池主要解决以下两个问题"><a href="#线程池主要解决以下两个问题" class="headerlink" title="线程池主要解决以下两个问题"></a>线程池主要解决以下两个问题</h3><ol><li>提升性能：线程池独立维护线程的创建、维护和分配</li><li>线程管理</li></ol><h3 id="JUC的线程池"><a href="#JUC的线程池" class="headerlink" title="JUC的线程池"></a>JUC的线程池</h3><ol><li>Executor</li><li>ExecutorService extends Executor</li><li>AbstractExecutorService 为ExecutorService中的接口提供默认实现</li><li>ThreadPoolExecutor 线程池的核心实现类</li><li>ScheduledExecutorService</li><li>ScheduledThreadPoolExecutor</li><li>Executors<ol><li>newSingleThreadExecutor:创建单线程化线程池<ol><li>线程池中的任务是按照提交的次序顺序执行</li><li>唯一线程的存活时间是无限的</li><li>当唯一线程正繁忙时，新提交的任务实例会进入内部的阻塞队列中，其阻塞队列是无界的</li></ol></li><li>newFixedThreadPool:创建固定数量的线程池<ol><li>如果线程数没有达到固定大小，每次提交一个任务，线程池就创建一个新线程，直到线程达到线程池固定的数量</li><li>线程池的大小一旦达到规定数量就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程</li><li>如果池中的所有线程均繁忙状态，新任务进入阻塞队列，无界的阻塞队列</li></ol></li><li>newCachedThreadPool:创建可缓存线程池<ol><li>在接收新的异步任务时，如果池中所有线程繁忙，此线程池就会添加新线程来处理任务</li><li>此线程池不会对线程大小进行限制，线程池大小完全依赖操作系统能够创建的最大线程大小</li><li>部分线程空闲，60s不执行任务就会回收</li></ol></li><li>newScheduledThreadPool:创建可调度线程池</li></ol></li></ol><h3 id="标准创建线程池方式"><a href="#标准创建线程池方式" class="headerlink" title="标准创建线程池方式"></a>标准创建线程池方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>    <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>    <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>    <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>    <span class="token class-name">BlockintQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>    <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>    <span class="token class-name">RejectExecutionHandler</span> handler<span class="token punctuation">)</span></code></pre><ol><li><p>核心和最大线程数量</p><p>线程池执行器会根据corePoolSize和maximumPoolSize自动维护线程池中工作线程，大致规则：</p><ol><li>当线程池接收到新任务，并且当前工作线程数少于corePoolSize时，即使其他工作线程处于空闲状态，也会创建一个新线程来处理该请求，直到线程数达到corePoolSize.</li><li>如果当前工作线程多于corePoolSize数量，但小于maximumPoolSize数量，那么仅当任务排队队列已满时才会创建新线程</li><li>当maximumPoolSize被设置为无界值，线程池可以接收任意数量的并发任务</li><li>可以动态修改</li></ol></li><li><p>BlockingQueue</p></li><li><p>keepAliveTime</p></li></ol><h3 id="线程池的任务调度流程"><a href="#线程池的任务调度流程" class="headerlink" title="线程池的任务调度流程"></a>线程池的任务调度流程</h3><ol><li>如果当前工作线程数量小于核心线程数量，执行器总是优先创建一个任务线程，而不是从线程队列中获取一个空闲线程</li><li>如果线程池中总的任务数量大于核心线程池数量，新接收的任务将加入阻塞队列，一直到阻塞队列已满。在核心线程池数量已经用完、阻塞队列没有满的场景下，线程池不会为新任务创建一个新线程</li><li>当完成一个任务的执行时，执行器总是优先从阻塞队列中获取下一个任务，并开始执行，一直到阻塞队列为空。</li><li>在核心线程池数量已经用完、阻塞队列已满的场景下，如果线程池接收到新的任务，将会为新任务创建一个线程，并且开始执行新任务</li><li>在核心线程都用完、阻塞队列已满的情况下，一直会创建新线程去执行新任务，直到池内的线程总数超出maximumPoolSize。</li><li>如果线程池的线程总数超过maximumPoolSize，线程池就会拒绝接受任务，当新任务过来时，会为新任务执行拒绝策略。</li></ol><h3 id="任务阻塞队列"><a href="#任务阻塞队列" class="headerlink" title="任务阻塞队列"></a>任务阻塞队列</h3><p>阻塞队列为空时会阻塞当前线程的元素获取操作，具体来说，在一个线程从一个空的阻塞队列中获取元素时线程会被阻塞，直到阻塞队列中有了元素；当队列中有元素后，被阻塞的线程会自动被唤醒。</p><p>常用的实现类：</p><ol><li>ArrayBlockingQueue:是一个数组实现的有界阻塞队列，队列中的元素按FIFO排序。</li><li>LinkedBlockingQueue:是一个基于链表实现的阻塞队列，按FIFO排序任务，可以设置容量(有界队列)，不设置容量则默认使用Integer.Max_VALUE作为容量(无界队列)，吞吐量高于ArrayBlockingQueue</li><li>PriorityBlockingQueue:具有优先级的无界队列</li><li>DelayQueue:这是一个无界阻塞延迟队列，底层基于PriorityBlockingQueue实现，队列中每个元素都有过期时间，当队列获取元素时，只有已经过期的元素才会出队，队列头部的元素是过期最快的元素。</li><li>SynchronousQueue:是一个不存储元素的阻塞队列，每个插入操作必须等另一个线程的调用移除操作，否则插入操作一直处于阻塞状态，吞吐量高于LinkedBlockingQueue</li></ol><h3 id="调度器的钩子方法"><a href="#调度器的钩子方法" class="headerlink" title="调度器的钩子方法"></a>调度器的钩子方法</h3><p>ThreadPoolExecutor线程池调度器为每个任务执行前后都提供了钩子方法。ThreadPoolExecutor类提供了三个钩子方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 任务执行之前的钩子方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">beforeExecute</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">// 任务执行之后的钩子方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterExecute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">// 线程池终止时钩子方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><ol><li><p>beforeExecute:异步任务执行之前的钩子方法</p><p>有执行目标实例的工作线程调用，可用于重新初始化ThreadLocal线程本地变量实例、更新日志记录、开始计时统计、更新上下文变量</p></li><li><p>afterExecute:异步任务执行之后的钩子方法</p><p>线程池工作线程在异步执行目标实例后调用此钩子方法，可用于清除ThreadLocal线程本地变量、更新日志记录、收集统计信息、更新上下文变量</p></li><li><p>terminated:线程池终止时的钩子方法</p></li></ol><p>说明：</p><p>beforeExecute和afterExecute两个方法在每个任务执行前后被调用，如果钩子引发异常，内部工作线程可能失败并突然终止。</p><h3 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h3><p>任务被拒绝的两种情况：</p><ul><li>线程池已经关闭</li><li>工作队列已满且maximumPoolSize已满</li></ul><p>拒绝策略的几种实现：</p><ul><li>AbortPolicy:直接拒绝任务策略，抛出异常RejectedExecutionException，是线程池默认的拒绝策略。</li><li>DiscardPolicy:抛弃任务策略，新任务直接被丢掉，并且不会有任何异常抛出</li><li>DiscardOldestPolicy:抛弃最老任务策略，就是说如果队列满了，就会将最早进入队列的任务抛弃，从队列中腾出空间，再尝试加入队列。</li><li>CallerRunsPolicy:调用者执行策略，如果添加任务失败，那么提交任务线程会自己去执行该任务，不会使用线程池中的线程去执行新任务</li></ul><h3 id="线程池优雅关闭"><a href="#线程池优雅关闭" class="headerlink" title="线程池优雅关闭"></a>线程池优雅关闭</h3><p>线程池总共存在5中状态</p><ul><li>RUNNING:线程池创建之后的初始状态，这种状态下可以执行任务。</li><li>SHUTDOWN:该状态下线程池不再接受新任务，但是会将工作队列中的任务执行完毕</li><li>STOP:该状态下线程池不再接受新任务，也不会处理工作队列中的剩余任务，并且将会中断所有工作线程</li><li>TIDYING:该状态下所有任务都已终止或者处理完成，将会执行terminated()钩子方法</li><li>TERMINATED:执行完terminated()钩子方法之后的状态</li></ul><p>线程池的状态转换规则：</p><ul><li>线程池创建以后状态为RUNNING</li><li>执行线程池的shutdown()实例方法，会使线程池从RUNNING转变为SHUTDOWN</li><li>执行线程池的shutdownNow()方法，会使线程池状态从RUNNING转变为STOP</li><li>当线程池处于SHUTDOWN状态时，执行其shutdownNow()方法会将其状态转变为STOP</li><li>等待线程池的所有工作线程停止，工作队列清空之后，线程池状态会从STOP转变为TIDYING</li><li>执行完terminated()钩子方法之后，线程池状态从TIDYING转变为TERMINATED</li></ul><p>优雅关闭线程池涉及到的方法有3个：</p><ul><li><p>shutdown</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 检查权限</span>            <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置线程池状态</span>            <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 中断空闲线程</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 钩子函数，主要用于清理一些资源</span>            <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hook for ScheduledThreadPoolExecutor</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>shutdownNow</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 检查状态</span>            <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将线程池状态变为STOP</span>            <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 中断所有线程，包括工作线程以及空闲线程</span>            <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 丢弃工作队列中的剩余任务</span>            tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tasks<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>awaitTermination</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TERMINATED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                nanos <span class="token operator">=</span> termination<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>优雅地关闭线程池</p><p>结合shutdown()、shutdownNow()、awaitTermination()三个方法优雅地关闭一个线程池，大致分以下几步：</p><ol><li>执行shutdown()方法，拒绝新任务的提交，并等待所有任务有序地执行完毕</li><li>执行awaitTermination()方法，指定超时时间，判断是否已经关闭所有任务，线程池关闭</li><li>如果awaitTermination()方法返回false,或者被中断，就调用shutdownNow()方法立即关闭线程池所有任务</li><li>补充执行awaitTermination()，判断线程池是否关闭完成。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>crazymakercircle<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token comment">// 省略import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadUtil</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shutdownThreadPoolGracefully</span><span class="token punctuation">(</span>                                                      <span class="token class-name">ExecutorService</span> threadPool<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 若已经关闭则返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>threadPool <span class="token keyword">instanceof</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">)</span> <span class="token operator">||</span>                                                      threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//拒绝接受新任务</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment">// 等待60秒，等待线程池中的任务完成执行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// 调用 shutdownNow() 方法取消正在执行的任务</span>                threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次等待60秒，如果还未结束，可以再次尝试，或者直接放弃</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池任务未正常执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 捕获异常，重新调用 shutdownNow() 方法</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 仍然没有关闭，循环关闭1000次，每次等待10毫秒</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 省略不相干代码</span><span class="token punctuation">}</span></code></pre></li></ul><p>注册JVM钩子函数自动关闭线程池</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>crazymakercircle<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token comment">// 省略import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadUtil</span><span class="token punctuation">{</span>    <span class="token comment">//懒汉式单例创建线程池：用于执行定时、顺序任务</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SeqOrScheduledTargetThreadPoolLazyHolder</span>    <span class="token punctuation">{</span>        <span class="token comment">//线程池：用于定时任务、顺序排队执行任务</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledThreadPoolExecutor</span> <span class="token constant">EXECUTOR</span> <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">CustomThreadFactory</span><span class="token punctuation">(</span><span class="token string">"seq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span>        <span class="token punctuation">{</span>            <span class="token comment">//注册JVM关闭时的钩子函数</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span>                                 <span class="token keyword">new</span> <span class="token class-name">ShutdownHookThread</span><span class="token punctuation">(</span><span class="token string">"定时和顺序任务线程池"</span><span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>                        <span class="token punctuation">{</span>                            <span class="token comment">//优雅地关闭线程池</span>                            <span class="token function">shutdownThreadPoolGracefully</span><span class="token punctuation">(</span><span class="token constant">EXECUTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 省略不相干代码</span><span class="token punctuation">}</span></code></pre><h3 id="Executors快捷创建线程池的潜在问题"><a href="#Executors快捷创建线程池的潜在问题" class="headerlink" title="Executors快捷创建线程池的潜在问题"></a>Executors快捷创建线程池的潜在问题</h3><ol><li><p>使用Executors创建固定数量的线程池的潜在问题</p><p>newFixedThreadPool工厂方法创建固定数量的线程池的源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用了LinkedBlockingQueue无界阻塞队列，如果任务提交速度持续大于任务处理速度，就会造成队列中大量的任务等待。如果队列很大，很可能导致JVM出现OOM异常。</p></li><li><p>使用Executors创建单线程化线程池的潜在问题</p><p>newSingleThreadExecutor工厂方法创建单线程化线程池的源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>FinalizableDelegatedExecutorService防止线程池的corePoolSize被动态修改</p><p>潜在问题跟newFixedThreadPool一样</p></li><li><p>使用Executors创建可缓存线程池的潜在问题</p><p>使用newCachedThreadPool工厂方法创建可缓存线程池的源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>                                      <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其最大线程数量不设上限，可以认为可以无限创建线程，如果任务提交较多，就会造成大量的线程被启动，很有可能造成OOM，甚至导致CPU线程资源耗尽</p></li><li><p>Executors创建可调度线程池的潜在问题</p><p>newScheduledThreadPool工厂方法创建可调度线程池的源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>              <span class="token constant">DEFAULT_KEEPALIVE_MILLIS</span><span class="token punctuation">,</span> <span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其最大线程数量不设上限，由于其线程数量不设限，如果到期任务太多，就会导致CPU的线程资源耗尽</p></li></ol><h3 id="确定线程池的线程数"><a href="#确定线程池的线程数" class="headerlink" title="确定线程池的线程数"></a>确定线程池的线程数</h3><p>使用线程池的好处主要有以下三点</p><ul><li>降低资源消耗：通过重复利用已创建的线程可以降低线程创建和销毁造成的消耗</li><li>提高响应速度</li><li>提高线程的可管理性</li></ul><p>按照任务类型对线程池进行分类：</p><ul><li><p>IO密集型任务:主要执行IO操作。执行IO操作的时间较长，导致CPU的利用率不高，这类任务CPU常处于空闲状态</p><p>通常需要开CPU核心数两倍的线程</p></li><li><p>CPU密集型任务：主要是执行计算任务，由于响应时间很快，CPU一直在运行，这种任务CPU的利用率很高</p><p>CPU密集型任务并行执行的数量应当等于CPU的核心数</p></li><li><p>混合型任务</p><p>最佳线程数=（（线程等待时间+线程CPU时间）/ 线程CPU时间）* CPU核数</p><p>等待时间所占的比例越高，需要的线程就越多；CPU耗时所占的比例越高，需要的线程就越少</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/2023/03/23/rocketmq/"/>
      <url>/2023/03/23/rocketmq/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么选择RocketMQ"><a href="#为什么选择RocketMQ" class="headerlink" title="为什么选择RocketMQ"></a>为什么选择RocketMQ</h2><table><thead><tr><th>Messaging Product</th><th>Client SDK</th><th>Protocol and Specification</th><th>Ordered Message</th><th>Scheduled Message</th><th>Batched Message</th><th>BroadCast Message</th><th>Message Filter</th><th>Server Triggered Redelivery</th><th>Message Storage</th><th>Message Retroactive</th><th>Message Priority</th><th>High Availability and Failover</th><th>Message Track</th><th>Configuration</th><th>Management and Operation Tools</th></tr></thead><tbody><tr><td>Kafka</td><td>Java, Scala etc.</td><td>Pull model, support TCP</td><td>确保分区内的消息排序</td><td>Not Supported</td><td>Supported, with async producer</td><td>Not Supported</td><td>Supported, you can use Kafka Streams to filter messages</td><td>Not Supported</td><td>High performance file storage</td><td>Supported offset indicate</td><td>Not Supported</td><td>Supported, requires a ZooKeeper server</td><td>Not Supported</td><td>Kafka uses key-value pairs format for configuration. These values can be supplied either from a file or programmatically.</td><td>Supported, use terminal command to expose core metrics</td></tr><tr><td>RocketMQ</td><td>Java, C++, Go</td><td>Pull model, support TCP, JMS, OpenMessaging</td><td>确保消息的严格排序，并且可以优雅地横向扩展</td><td>Supported</td><td>Supported, with sync mode to avoid message loss</td><td>Supported</td><td>Supported, property filter expressions based on SQL92</td><td>Supported</td><td>High performance and low latency file storage</td><td>Supported timestamp and offset two indicates</td><td>Not Supported</td><td>Supported, Master-Slave model, without another kit</td><td>Supported</td><td>Work out of box,user only need to pay attention to a few configurations</td><td>Supported, rich web and terminal command to expose core metrics</td></tr></tbody></table><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>主题-Topic</p><p>Apache RocketMQ 中消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。主题通过TopicName来做唯一标识和区分</p></li><li><p>消息类型-MessageType</p><p>Apache RocketMQ 中按照消息传输特性的不同而定义的分类，用于类型管理和安全校验。 Apache RocketMQ 支持的消息类型有普通消息、顺序消息、事务消息和定时/延时消息。</p></li><li><p>消息队列-MessageQueue</p><p>队列是 Apache RocketMQ 中消息存储和传输的实际容器，也是消息的最小存储单元。 Apache RocketMQ 的所有主题都是由多个队列组成，以此实现队列数量的水平拆分和队列内部的流式存储。队列通过QueueId来做唯一标识和区分。</p></li><li><p>消息-Message</p><p>消息是 Apache RocketMQ 中的最小数据传输单元。生产者将业务数据的负载和拓展属性包装成消息发送到服务端，服务端按照相关语义将消息投递到消费端进行消费。</p></li><li><p>消息视图-MessageView</p><p>消息视图是 Apache RocketMQ 面向开发视角提供的一种消息只读接口。通过消息视图可以读取消息内部的多个属性和负载信息，但是不能对消息本身做任何修改。</p></li><li><p>消息标签-MessageTag</p><p>消息标签是Apache RocketMQ 提供的细粒度消息分类属性，可以在主题层级之下做消息类型的细分。消费者通过订阅特定的标签来实现细粒度过滤。</p></li><li><p>消息位点-MessageQueueOffset</p><p>消息是按到达Apache RocketMQ 服务端的先后顺序存储在指定主题的多个队列中，每条消息在队列中都有一个唯一的Long类型坐标，这个坐标被定义为消息位点。</p></li><li><p>消费位点-ConsumerOffset</p><p>一条消息被某个消费者消费完成后不会立即从队列中删除，Apache RocketMQ 会基于每个消费者分组记录消费过的最新一条消息的位点，即消费位点。</p></li><li><p>消息索引-MessageKey</p><p>消息索引是Apache RocketMQ 提供的面向消息的索引属性。通过设置的消息索引可以快速查找到对应的消息内容。</p></li><li><p>生产者</p></li><li><p>事务检查器-TransactionChecker</p><p>Apache RocketMQ 中生产者用来执行本地事务检查和异常事务恢复的监听器。事务检查器应该通过业务侧数据的状态来检查和判断事务消息的状态。</p></li><li><p>事务状态-TransactionResolution</p><p>Apache RocketMQ 中事务消息发送过程中，事务提交的状态标识，服务端通过事务状态控制事务消息是否应该提交和投递。事务状态包括事务提交、事务回滚和事务未决。</p></li><li><p>消费者分组-ConsumerGroup</p><p>消费者分组是Apache RocketMQ 系统中承载多个消费行为一致的消费者的负载均衡分组。和消费者不同，消费者分组并不是运行实体，而是一个逻辑资源。在 Apache RocketMQ 中，通过消费者分组内初始化多个消费者实现消费性能的水平扩展以及高可用容灾。</p></li><li><p>消费者-Consumer</p><p>消费者是Apache RocketMQ 中用来接收并处理消息的运行实体。消费者通常被集成在业务系统中，从服务端获取消息，并将消息转化成业务可理解的信息，供业务逻辑处理。</p></li><li><p>消费结果-ConsumeResult</p><p>Apache RocketMQ 中PushConsumer消费监听器处理消息完成后返回的处理结果，用来标识本次消息是否正确处理。消费结果包含消费成功和消费失败。</p></li><li><p>订阅关系-SubScription</p><p>订阅关系是Apache RocketMQ 系统中消费者获取消息、处理消息的规则和状态配置。订阅关系由消费者分组动态注册到服务端系统，并在后续的消息传输中按照订阅关系定义的过滤规则进行消息匹配和消费进度维护。</p></li><li><p>消息过滤</p><p>消费者可以通过订阅指定消息标签（Tag）对消息进行过滤，确保最终只接收被过滤后的消息合集。过滤规则的计算和匹配在Apache RocketMQ 的服务端完成。</p></li><li><p>重置消费位点</p><p>以时间轴为坐标，在消息持久化存储的时间范围内，重新设置消费者分组对已订阅主题的消费进度，设置完成后消费者将接收设定时间点之后，由生产者发送到Apache RocketMQ 服务端的消息。</p></li><li><p>消息轨迹</p><p>在一条消息从生产者发出到消费者接收并处理过程中，由各个相关节点的时间、地点等数据汇聚而成的完整链路信息。通过消息轨迹，您能清晰定位消息从生产者发出，经由Apache RocketMQ 服务端，投递给消费者的完整链路，方便定位排查问题。</p></li><li><p>消息堆积</p><p>生产者已经将消息发送到Apache RocketMQ 的服务端，但由于消费者的消费能力有限，未能在短时间内将所有消息正确消费掉，此时在服务端保存着未被消费的消息，该状态即消息堆积。</p></li><li><p>事务消息</p><p>事务消息是Apache RocketMQ 提供的一种高级消息类型，支持在分布式场景下保障消息生产和本地事务的最终一致性。</p></li><li><p>定时/延时消息</p><p>定时/延时消息是Apache RocketMQ 提供的一种高级消息类型，消息被发送至服务端后，在指定时间后才能被消费者消费。通过设置一定的定时时间可以实现分布式场景的延时调度触发效果。</p></li><li><p>顺序消息</p><p>顺序消息是Apache RocketMQ 提供的一种高级消息类型，支持消费者按照发送消息的先后顺序获取消息，从而实现业务场景中的顺序处理。</p></li></ul><h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><img src="/2023/03/23/rocketmq/mainarchi-9b036e7ff5133d050950f25838367a17.png" class="" title="领域模型"><h3 id="生产者–producer"><a href="#生产者–producer" class="headerlink" title="生产者–producer"></a>生产者–producer</h3><h3 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h3><h4 id="主题-Topic"><a href="#主题-Topic" class="headerlink" title="主题-Topic"></a>主题-Topic</h4><p>消息传输和存储的分组容器，主题内部由多个队列组成，消息的存储和水平扩展实际是通过主题内的队列实现的</p><h4 id="队列-MessageQueue"><a href="#队列-MessageQueue" class="headerlink" title="队列-MessageQueue"></a>队列-MessageQueue</h4><p>消息传输和存储的实际单元容器，类比于其他消息队列中的分区。 Apache RocketMQ 通过流式特性的无限队列结构来存储消息，消息在队列内具备顺序性存储特征</p><h4 id="消息-Message"><a href="#消息-Message" class="headerlink" title="消息-Message"></a>消息-Message</h4><p>Apache RocketMQ 的最小传输单元。消息具备不可变性，在初始化发送和完成存储后即不可变</p><h3 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h3><h4 id="消费者分组-ConsumerGroup"><a href="#消费者分组-ConsumerGroup" class="headerlink" title="消费者分组-ConsumerGroup"></a>消费者分组-ConsumerGroup</h4><p>Apache RocketMQ 发布订阅模型中定义的独立的消费身份分组，用于统一管理底层运行的多个消费者（Consumer）。同一个消费组的多个消费者必须保持消费逻辑和配置一致，共同分担该消费组订阅的消息，实现消费能力的水平扩展。</p><h4 id="消费者-Consumer"><a href="#消费者-Consumer" class="headerlink" title="消费者-Consumer"></a>消费者-Consumer</h4><p>Apache RocketMQ 消费消息的运行实体，一般集成在业务调用链路的下游。消费者必须被指定到某一个消费组中。</p><h4 id="订阅关系-Subscription"><a href="#订阅关系-Subscription" class="headerlink" title="订阅关系-Subscription"></a>订阅关系-Subscription</h4><p>Apache RocketMQ 发布订阅模型中消息过滤、重试、消费进度的规则配置。订阅关系以消费组粒度进行管理，消费组通过定义订阅关系控制指定消费组下的消费者如何实现消息过滤、消费重试及消费进度恢复等。</p><p>Apache RocketMQ 的订阅关系除过滤表达式之外都是持久化的，即服务端重启或请求断开，订阅关系依然保留。</p><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><ol><li><p>同步RPC通信模型</p><img src="/2023/03/23/rocketmq/syncarchi-ebbd41e1afd6adf432792ee2d7a91748.png" class="" title="同步调用"></li><li><p>异步通信模型</p><img src="/2023/03/23/rocketmq/asyncarchi-e7ee18dd77aca472fb80bb2238d9528b.png" class="" title="异步调用"></li></ol><h2 id="消息传输模型"><a href="#消息传输模型" class="headerlink" title="消息传输模型"></a>消息传输模型</h2><ol><li><p>点对点模型</p><img src="/2023/03/23/rocketmq/p2pmode-fefdc2fbe4792e757e26befc0b3acbff.png" class="" title="点对点模型"></li><li><p>发布订阅模型</p><img src="/2023/03/23/rocketmq/pubsub-042a4e5e5d76806943bd7dcfb730c5d5.png" class="" title="发布订阅模型"><p> Apache RocketMQ 使用的传输模型为发布订阅模型，因此也具有发布订阅模型的特点。</p></li></ol><h2 id="主题-Topic-1"><a href="#主题-Topic-1" class="headerlink" title="主题-Topic"></a>主题-Topic</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>主题是 Apache RocketMQ 中消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。 主题的作用主要如下：</p><ul><li><strong>定义数据的分类隔离：</strong> 在 Apache RocketMQ 的方案设计中，建议将不同业务类型的数据拆分到不同的主题中管理，通过主题实现存储的隔离性和订阅隔离性。</li><li><strong>定义数据的身份和权限：</strong> Apache RocketMQ 的消息本身是匿名无身份的，同一分类的消息使用相同的主题来做身份识别和权限管理。</li></ul><h3 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h3><img src="/2023/03/23/rocketmq/archifortopic-ef512066703a22865613ea9216c4c300.png" class="" title="主题"><p>主题内部由多个队列组成，消息的存储和水平扩展能力最终是由队列实现的；并且针对主题的所有约束和属性设置，最终也是通过主题内部的队列来实现。</p><h3 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h3><h4 id="主题名称"><a href="#主题名称" class="headerlink" title="主题名称"></a>主题名称</h4><ul><li>定义：主题的名称，用于标识主题，主题名称集群内全局唯一。</li><li>取值：由用户创建主题时定义。</li><li>约束：</li></ul><h4 id="队列列表"><a href="#队列列表" class="headerlink" title="队列列表"></a>队列列表</h4><ul><li>定义：队列作为主题的组成单元，是消息存储的实际容器，一个主题内包含一个或多个队列，消息实际存储在主题的各队列内。</li><li>取值：系统根据队列数量给主题分配队列，队列数量创建主题时定义。</li><li>约束：一个主题内至少包含一个队列。</li></ul><h4 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h4><ul><li>定义：主题所支持的消息类型。</li><li>取值：创建主题时选择消息类型。Apache RocketMQ 支持的主题类型如下：<ul><li>Normal：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/01normalmessage">普通消息</a>，消息本身无特殊语义，消息之间也没有任何关联。</li><li>FIFO：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/03fifomessage">顺序消息</a>，Apache RocketMQ 通过消息分组MessageGroup标记一组特定消息的先后顺序，可以保证消息的投递顺序严格按照消息发送时的顺序。</li><li>Delay：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage">定时/延时消息</a>，通过指定延时时间控制消息生产后不要立即投递，而是在延时间隔后才对消费者可见。</li><li>Transaction：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">事务消息</a>，Apache RocketMQ 支持分布式事务消息，支持应用数据库更新和消息调用的事务一致性保障。</li></ul></li><li>约束：每个主题只支持一种消息类型。</li></ul><h3 id="行为约束"><a href="#行为约束" class="headerlink" title="行为约束"></a>行为约束</h3><h4 id="消息类型强制校验"><a href="#消息类型强制校验" class="headerlink" title="消息类型强制校验"></a><strong>消息类型强制校验</strong></h4><p>Apache RocketMQ 5.x版本将消息类型拆分到主题中进行独立运维和处理，因此系统会对发送的消息类型和主题定的消息类型进行强制校验，若校验不通过，则消息发送请求会被拒绝，并返回类型不匹配异常。校验原则如下：</p><ul><li>消息类型必须一致发送的消息的类型，必须和目标主题定义的消息类型一致。</li><li>主题类型必须单一每个主题只支持一种消息类型，不允许将多种类型的消息发送到同一个主题中。</li></ul><h4 id="常见错误使用场景"><a href="#常见错误使用场景" class="headerlink" title="常见错误使用场景"></a><strong>常见错误使用场景</strong></h4><ul><li>发送的消息类型不匹配例如，创建主题时消息类型定义为顺序消息，发送消息时发送事务消息到该主题中，此时消息发送请求会被拒绝，并返回类型不匹配异常。</li><li>单一消息主题混用例如，创建主题时消息类型定义为普通消息，发送消息时同时发送普通消息和顺序消息到该主题中，则顺序消息的发送请求会被拒绝，并返回类型不匹配异常。</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>按照业务分类合理拆分主题</strong></p><p>Apache RocketMQ 的主题拆分设计应遵循大类统一原则，即将相同业务域内同一功能属性的消息划分为同一主题。拆分主题时，您可以从以下角度考虑拆分粒度：</p><ul><li>消息类型是否一致：不同类型的消息，如顺序消息和普通消息需要使用不同的主题。</li><li>消息业务是否关联：如果业务没有直接关联，比如，淘宝交易消息和盒马物流消息没有业务交集，需要使用不同的消息主题；同样是淘宝交易消息，女装类订单和男装类订单可以使用同一个订单。当然，如果业务量较大或其他子模块应用处理业务时需要进一步拆分订单类型，您也可以将男装订单和女装订单的消息拆分到两个主题中。</li><li>消息量级是否一样：数量级不同或时效性不同的业务消息建议使用不同的主题，例如某些业务消息量很小但是时效性要求很强，如果跟某些万亿级消息量的业务使用同一个主题，会增加消息的等待时长。</li></ul><p><strong>正确拆分示例：</strong> 线上商品购买场景下，订单交易如订单创建、支付、取消等流程消息使用一个主题，物流相关消息使用一个主题，积分管理相关消息使用一个主题。</p><p><strong>错误拆分示例：</strong></p><ul><li>拆分粒度过粗：会导致业务隔离性差，不利于独立运维和故障处理。例如，所有交易消息和物流消息都共用一个主题。</li><li>拆分粒度过细：会消耗大量主题资源，造成系统负载过重。例如，按照用户ID区分，每个用户ID使用一个主题。</li></ul><p><strong>单一主题只收发一种类型消息，避免混用</strong></p><p>Apache RocketMQ 主题的设计原则为通过主题隔离业务，不同业务逻辑的消息建议使用不同的主题。同一业务逻辑消息的类型都相同，因此，对于指定主题，应该只收发同一种类型的消息。</p><p><strong>主题管理尽量避免自动化机制</strong></p><p>在 Apache RocketMQ 架构中，主题属于顶层资源和容器，拥有独立的权限管理、可观测性指标采集和监控等能力，创建和管理主题会占用一定的系统资源。因此，生产环境需要严格管理主题资源，请勿随意进行增、删、改、查操作。</p><p>Apache RocketMQ 虽然提供了自动创建主题的功能，但是建议仅在测试环境使用，生产环境请勿打开，避免产生大量垃圾主题，无法管理和回收并浪费系统资源。</p><h2 id="队列-MessageQueue-1"><a href="#队列-MessageQueue-1" class="headerlink" title="队列-MessageQueue"></a>队列-MessageQueue</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>队列是 Apache RocketMQ 中消息存储和传输的实际容器，也是 Apache RocketMQ 消息的最小存储单元。 Apache RocketMQ 的所有主题都是由多个队列组成，以此实现队列数量的水平拆分和队列内部的流式存储。</p><p>队列的主要作用如下：</p><ul><li><p>存储顺序性</p><p>队列天然具备顺序性，即消息按照进入队列的顺序写入存储，同一队列间的消息天然存在顺序关系，队列头部为最早写入的消息，队列尾部为最新写入的消息。消息在队列中的位置和消息之间的顺序通过位点（Offset）进行标记管理。</p></li><li><p>流式操作语义</p><p>Apache RocketMQ 基于队列的存储模型可确保消息从任意位点读取任意数量的消息，以此实现类似聚合读取、回溯读取等特性，这些特性是RabbitMQ、ActiveMQ等非队列存储模型不具备的。</p></li></ul><h3 id="模型关系-1"><a href="#模型关系-1" class="headerlink" title="模型关系"></a>模型关系</h3><img src="/2023/03/23/rocketmq/archiforqueue-dd6788b33bf2fc96b4a1dab83a1b0d71.png" class="" title="队列"><p>Apache RocketMQ 默认提供消息可靠存储机制，所有发送成功的消息都被持久化存储到队列中，配合生产者和消费者客户端的调用可实现至少投递一次的可靠性语义。</p><p>Apache RocketMQ 队列模型和Kafka的分区（Partition）模型类似。在 Apache RocketMQ 消息收发模型中，队列属于主题的一部分，虽然所有的消息资源以主题粒度管理，但实际的操作实现是面向队列。例如，生产者指定某个主题，向主题内发送消息，但实际消息发送到该主题下的某个队列中。</p><p>Apache RocketMQ 中通过修改队列数量，以此实现横向的水平扩容和缩容。</p><h3 id="内部属性-1"><a href="#内部属性-1" class="headerlink" title="内部属性"></a>内部属性</h3><p>读写权限</p><ul><li><p>定义：当前队列是否可以读写数据。</p></li><li><p>取值：由服务端定义，枚举值如下</p><ul><li>6：读写状态，当前队列允许读取消息和写入消息。</li><li>4：只读状态，当前队列只允许读取消息，不允许写入消息。</li><li>2：只写状态，当前队列只允许写入消息，不允许读取消息。</li><li>0：不可读写状态，当前队列不允许读取消息和写入消息。</li></ul></li><li><p>约束：队列的读写权限属于运维侧操作，不建议频繁修改。</p></li></ul><h3 id="行为约束-1"><a href="#行为约束-1" class="headerlink" title="行为约束"></a>行为约束</h3><p>每个主题下会由一到多个队列来存储消息，每个主题对应的队列数与消息类型以及实例所处地域（Region）相关，队列数暂不支持修改。</p><h3 id="使用建议-1"><a href="#使用建议-1" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>按照实际业务消耗设置队列数</strong></p><p>Apache RocketMQ 的队列数可在创建主题或变更主题时设置修改，队列数量的设置应遵循少用够用原则，避免随意增加队列数量。</p><p>主题内队列数过多可能对导致如下问题：</p><ul><li><p>集群元数据膨胀</p><p>Apache RocketMQ 会以队列粒度采集指标和监控数据，队列过多容易造成管控元数据膨胀。</p></li><li><p>客户端压力过大</p><p>Apache RocketMQ 的消息读写都是针对队列进行操作，队列过多容易产生空轮询请求，增加系统负荷。</p></li></ul><p><strong>常见队列增加场景</strong></p><ul><li><p>需要增加队列实现物理节点负载均衡</p><p>Apache RocketMQ 每个主题的多个队列可以分布在不同的服务节点上，在集群水平扩容增加节点后，为了保证集群流量的负载均衡，建议在新的服务节点上新增队列，或将旧的队列迁移到新的服务节点上。</p></li><li><p>需要增加队列实现顺序消息性能扩展</p><p>在 Apache RocketMQ 服务端4.x版本中，顺序消息的顺序性在队列内生效的，因此顺序消息的并发度会在一定程度上受队列数量的影响，因此建议仅在系统性能瓶颈时再增加队列。</p></li></ul><h2 id="消息-Message-1"><a href="#消息-Message-1" class="headerlink" title="消息-Message"></a>消息-Message</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>消息是 Apache RocketMQ 中的最小数据传输单元。生产者将业务数据的负载和拓展属性包装成消息发送到 Apache RocketMQ 服务端，服务端按照相关语义将消息投递到消费端进行消费。</p><p>Apache RocketMQ 的消息模型具备如下特点：</p><ul><li><p><strong>消息不可变性</strong></p><p>消息本质上是已经产生并确定的事件，一旦产生后，消息的内容不会发生改变。即使经过传输链路的控制也不会发生变化，消费端获取的消息都是只读消息视图。</p></li><li><p><strong>消息持久化</strong></p><p>Apache RocketMQ 会默认对消息进行持久化，即将接收到的消息存储到 Apache RocketMQ 服务端的存储文件中，保证消息的可回溯性和系统故障场景下的可恢复性。</p></li></ul><h3 id="模型关系-2"><a href="#模型关系-2" class="headerlink" title="模型关系"></a>模型关系</h3><img src="/2023/03/23/rocketmq/archiforqueue-dd6788b33bf2fc96b4a1dab83a1b0d71-16794849483128.png" class="" title="消息"><ol><li>消息由生产者初始化并发送到Apache RocketMQ 服务端。</li><li>消息按照到达Apache RocketMQ 服务端的顺序存储到队列中。</li><li>消费者按照指定的订阅关系从Apache RocketMQ 服务端中获取消息并消费。</li></ol><h3 id="消息内部属性"><a href="#消息内部属性" class="headerlink" title="消息内部属性"></a>消息内部属性</h3><p><strong>系统保留属性</strong></p><p><strong>主题名称</strong></p><ul><li>定义：当前消息所属的主题的名称。集群内全局唯一。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/domainModel/02topic">主题（Topic）</a>。</li><li>取值：从客户端SDK接口获取。</li></ul><p><strong>消息类型</strong></p><ul><li>定义：当前消息的类型。</li><li>取值：从客户端SDK接口获取。Apache RocketMQ 支持的消息类型如下：<ul><li>Normal：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/01normalmessage">普通消息</a>，消息本身无特殊语义，消息之间也没有任何关联。</li><li>FIFO：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/03fifomessage">顺序消息</a>，Apache RocketMQ 通过消息分组MessageGroup标记一组特定消息的先后顺序，可以保证消息的投递顺序严格按照消息发送时的顺序。</li><li>Delay：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage">定时/延时消息</a>，通过指定延时时间控制消息生产后不要立即投递，而是在延时间隔后才对消费者可见。</li><li>Transaction：<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">事务消息</a>，Apache RocketMQ 支持分布式事务消息，支持应用数据库更新和消息调用的事务一致性保障。</li></ul></li></ul><p><strong>消息队列</strong></p><ul><li>定义：实际存储当前消息的队列。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/domainModel/03messagequeue">队列（MessageQueue）</a>。</li><li>取值：由服务端指定并填充。</li></ul><p><strong>消息位点</strong></p><ul><li>定义：当前消息存储在队列中的位置。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/09consumerprogress">消费进度原理</a>。</li><li>取值：由服务端指定并填充。取值范围：0~long.Max。</li></ul><p><strong>消息ID</strong></p><ul><li>定义：消息的唯一标识，集群内每条消息的ID全局唯一。</li><li>取值：生产者客户端系统自动生成。固定为数字和大写字母组成的32位字符串。</li></ul><p><strong>索引Key列表（可选）</strong></p><ul><li>定义：消息的索引键，可通过设置不同的Key区分消息和快速查找消息。</li><li>取值：由生产者客户端定义。</li></ul><p><strong>过滤标签Tag（可选）</strong></p><ul><li>定义：消息的过滤标签。消费者可通过Tag对消息进行过滤，仅接收指定标签的消息。</li><li>取值：由生产者客户端定义。</li><li>约束：一条消息仅支持设置一个标签。</li></ul><p><strong>定时时间（可选）</strong></p><ul><li>定义：定时场景下，消息触发延时投递的毫秒级时间戳。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage">定时/延时消息</a>。</li><li>取值：由消息生产者定义。</li><li>约束：最大可设置定时时长为40天。</li></ul><p><strong>消息发送时间</strong></p><ul><li>定义：消息发送时，生产者客户端系统的本地毫秒级时间戳。</li><li>取值：由生产者客户端系统填充。</li><li>说明：客户端系统时钟和服务端系统时钟可能存在偏差，消息发送时间是以客户端系统时钟为准。</li></ul><p><strong>消息保存时间戳</strong></p><ul><li><p>定义：消息在Apache RocketMQ 服务端完成存储时，服务端系统的本地毫秒级时间戳。 对于定时消息和事务消息，消息保存时间指的是消息生效对消费方可见的服务端系统时间。</p></li><li><p>取值：由服务端系统填充。</p></li><li><p>说明：客户端系统时钟和服务端系统时钟可能存在偏差，消息保留时间是以服务端系统时钟为准。</p></li></ul><p><strong>消费重试次数</strong></p><ul><li>定义：消息消费失败后，Apache RocketMQ 服务端重新投递的次数。每次重试后，重试次数加1。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/10consumerretrypolicy">消费重试</a>。</li><li>取值：由服务端系统标记。首次消费，重试次数为0；消费失败首次重试时，重试次数为1。</li></ul><p><strong>业务自定义属性</strong></p><ul><li>定义：生产者可以自定义设置的扩展信息。</li><li>取值：由消息生产者自定义，按照字符串键值对设置。</li></ul><p><strong>消息负载</strong></p><ul><li>定义：业务消息的实际报文数据。</li><li>取值：由生产者负责序列化编码，按照二进制字节传输。</li><li>约束：请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">参数限制</a>。</li></ul><h3 id="行为约束-2"><a href="#行为约束-2" class="headerlink" title="行为约束"></a>行为约束</h3><p>消息大小不得超过其类型所对应的限制，否则消息会发送失败。</p><p>系统默认的消息最大限制如下：</p><ul><li>普通和顺序消息：4 MB</li><li>事务和定时或延时消息：64 KB</li></ul><h3 id="建议使用"><a href="#建议使用" class="headerlink" title="建议使用"></a>建议使用</h3><p><strong>单条消息不建议传输超大负载</strong></p><p>作为一款消息中间件产品，Apache RocketMQ 一般传输的是都是业务事件数据。单个原子消息事件的数据大小需要严格控制，如果单条消息过大容易造成网络传输层压力，不利于异常重试和流量控制。</p><p>生产环境中如果需要传输超大负载，建议按照固定大小做报文拆分，或者结合文件存储等方法进行传输。</p><p><strong>消息中转时做好不可变设计</strong></p><p>Apache RocketMQ 服务端5.x版本中，消息本身不可编辑，消费端获取的消息都是只读消息视图。 但在历史版本3.x和4.x版本中消息不可变性没有强约束，因此如果您需要在使用过程中对消息进行中转操作，务必将消息重新初始化。</p><ul><li><p>正确使用示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token class-name">Consumer</span><span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Message</span> m2<span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">buildFrom</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Producer</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>错误使用示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token class-name">Consumer</span><span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token class-name">Producer</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="生产者-Producer"><a href="#生产者-Producer" class="headerlink" title="生产者-Producer"></a>生产者-Producer</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>生产者是 Apache RocketMQ 系统中用来构建并传输消息到服务端的运行实体。</p><p>生产者通常被集成在业务系统中，将业务消息按照要求封装成 Apache RocketMQ 的<a href="https://rocketmq.apache.org/zh/docs/domainModel/04message">消息（Message）</a>并发送至服务端。</p><p>在消息生产者中，可以定义如下传输行为：</p><ul><li>发送方式：生产者可通过API接口设置消息发送的方式。Apache RocketMQ 支持同步传输和异步传输。</li><li>批量发送：生产者可通过API接口设置消息批量传输的方式。例如，批量发送的消息条数或消息大小。</li><li>事务行为：Apache RocketMQ 支持事务消息，对于事务消息需要生产者配合进行事务检查等行为保障事务的最终一致性。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">事务消息</a>。</li></ul><p>生产者和主题的关系为多对多关系，即同一个生产者可以向多个主题发送消息，对于平台类场景如果需要发送消息到多个主题，并不需要创建多个生产者；同一个主题也可以接收多个生产者的消息，以此可以实现生产者性能的水平扩展和容灾。</p><h3 id="模型关系-3"><a href="#模型关系-3" class="headerlink" title="模型关系"></a>模型关系</h3><img src="/2023/03/23/rocketmq/archiforproducer-ebb8ff832f6e857cbebc2c17c2044a3b.png" class="" title="生产者"><h3 id="内部属性-2"><a href="#内部属性-2" class="headerlink" title="内部属性"></a>内部属性</h3><p><strong>客户端ID</strong></p><ul><li>定义：生产者客户端的标识，用于区分不同的生产者。集群内全局唯一。</li><li>取值：客户端ID由Apache RocketMQ 的SDK自动生成，主要用于日志查看、问题定位等运维场景，不支持修改。</li></ul><p><strong>通信参数</strong></p><ul><li>接入点信息 <strong>（必选）</strong> ：连接服务端的接入地址，用于识别服务端集群。 接入点必须按格式配置，建议使用域名，避免使用IP地址，防止节点变更无法进行热点迁移。</li><li>身份认证信息 <strong>（可选）</strong> ：客户端用于身份验证的凭证信息。 仅在服务端开启身份识别和认证时需要传输。</li><li>请求超时时间 <strong>（可选）</strong> ：客户端网络请求调用的超时时间。取值范围和默认值，请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">参数限制</a>。</li></ul><p><strong>预绑定主题列表</strong></p><ul><li><p>定义：Apache RocketMQ 的生产者需要将消息发送到的目标主题列表，主要作用如下：</p><ul><li><p>事务消息 <strong>（必须设置）</strong> ：事务消息场景下，生产者在故障、重启恢复时，需要检查事务消息的主题中是否有未提交的事务消息。避免生产者发送新消息后，主题中的旧事务消息一直处于未提交状态，造成业务延迟。</p></li><li><p>非事务消息 <strong>（建议设置）</strong> ：服务端会在生产者初始化时根据预绑定主题列表，检查目标主题的访问权限和合法性，而不需要等到应用启动后再检查。</p><p>若未设置，或后续消息发送的目标主题动态变更， Apache RocketMQ 会对目标主题进行动态补充检验。</p></li></ul></li><li><p>约束：对于事务消息，预绑定列表必须设置，且需要和事务检查器一起配合使用。</p></li></ul><p><strong>事务检查器</strong></p><ul><li>定义：Apache RocketMQ 的事务消息机制中，为保证异常场景下事务的最终一致性，生产者需要主动实现事务检查器的接口。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">事务消息</a>。</li><li>发送事务消息时，事务检查器必须设置，且需要和预绑定主题列表一起配合使用。</li></ul><p><strong>发送重试策略</strong>：</p><ul><li>定义: 生产者在消息发送失败时的重试策略。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/05sendretrypolicy">消息发送重试机制</a>。</li></ul><h3 id="使用建议-2"><a href="#使用建议-2" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>不建议单一进程创建大量生产者</strong></p><p>Apache RocketMQ 的生产者和主题是多对多的关系，支持同一个生产者向多个主题发送消息。对于生产者的创建和初始化，建议遵循够用即可、最大化复用原则，如果有需要发送消息到多个主题的场景，无需为每个主题都创建一个生产者。</p><p><strong>不建议频繁创建和销毁生产者</strong></p><p>Apache RocketMQ 的生产者是可以重复利用的底层资源，类似数据库的连接池。因此不需要在每次发送消息时动态创建生产者，且在发送结束后销毁生产者。这样频繁的创建销毁会在服务端产生大量短连接请求，严重影响系统性能。</p><ul><li><p>正确示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Producer</span> p <span class="token operator">=</span> <span class="token class-name">ProducerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Message</span> m<span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>p<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>典型错误示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Producer</span> p <span class="token operator">=</span> <span class="token class-name">ProducerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> m<span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="消费者分组-ConsumerGroup-1"><a href="#消费者分组-ConsumerGroup-1" class="headerlink" title="消费者分组-ConsumerGroup"></a>消费者分组-ConsumerGroup</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>消费者分组是 Apache RocketMQ 系统中承载多个消费行为一致的消费者的负载均衡分组。</p><p>和消费者不同，消费者分组并不是运行实体，而是一个逻辑资源。在 Apache RocketMQ 中，通过消费者分组内初始化多个消费者实现消费性能的水平扩展以及高可用容灾。</p><p>在消费者分组中，统一定义以下消费行为，同一分组下的多个消费者将按照分组内统一的消费行为和负载均衡策略消费消息。</p><ul><li>订阅关系：Apache RocketMQ 以消费者分组的粒度管理订阅关系，实现订阅关系的管理和追溯。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/domainModel/09subscription">订阅关系（Subscription）</a>。</li><li>投递顺序性：Apache RocketMQ 的服务端将消息投递给消费者消费时，支持顺序投递和并发投递，投递方式在消费者分组中统一配置。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/03fifomessage">顺序消息</a>。</li><li>消费重试策略： 消费者消费消息失败时的重试策略，包括重试次数、死信队列设置等。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/10consumerretrypolicy">消费重试</a>。</li></ul><h3 id="内部属性-3"><a href="#内部属性-3" class="headerlink" title="内部属性"></a>内部属性</h3><p><strong>消费者分组名称</strong></p><ul><li>定义：消费者分组的名称，用于区分不同的消费者分组。集群内全局唯一。</li><li>取值：消费者分组由用户设置并创建。具体命名规范，请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">参数限制</a>。</li></ul><p><strong>投递顺序性</strong></p><ul><li><p>定义：消费者消费消息时，Apache RocketMQ 向消费者客户端投递消息的顺序。</p><p>根据不同的消费场景，Apache RocketMQ 提供顺序投递和并发投递两种方式。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/03fifomessage">顺序消息</a>。</p></li><li><p>取值：默认投递方式为并发投递。</p></li></ul><p><strong>消费重试策略</strong></p><ul><li>定义：消费者消费消息失败时，系统的重试策略。消费者消费消息失败时，系统会按照重试策略，将指定消息投递给消费者重新消费。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/10consumerretrypolicy">消费重试</a>。</li><li>取值：重试策略包括：<ul><li>最大重试次数：表示消息可以重新被投递的最大次数，超过最大重试次数还没被成功消费，消息将被投递至死信队列或丢弃。</li><li>重试间隔：Apache RocketMQ 服务端重新投递消息的间隔时间。 最大重试次数和重试间隔的取值范围及默认值，请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">参数限制</a>。</li></ul></li><li>约束：重试间隔仅在PushConsumer消费类型下有效。</li></ul><p><strong>订阅关系</strong></p><ul><li>定义：当前消费者分组关联的订阅关系集合。包括消费者订阅的主题，以及消息的过滤规则等。订阅关系由消费者动态注册到消费者分组中，Apache RocketMQ 服务端会持久化订阅关系并匹配消息的消费进度。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/domainModel/09subscription">订阅关系（Subscription）</a>。</li></ul><h3 id="行为约束-3"><a href="#行为约束-3" class="headerlink" title="行为约束"></a>行为约束</h3><p>Apache RocketMQ 要求同一分组下的所有消费者以下消费行为保持一致：</p><ul><li><strong>投递顺序</strong></li><li><strong>消费重试策略</strong></li></ul><h3 id="使用建议-3"><a href="#使用建议-3" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>按照业务合理拆分分组</strong></p><p>Apache RocketMQ 的消费者和主题是多对多的关系，对于消费者分组的拆分设计，建议遵循以下原则：</p><ul><li>消费者的投递顺序一致：同一消费者分组下所有消费者的消费投递顺序是相同的，统一都是顺序投递或并发投递，不同业务场景不能混用消费者分组。</li><li>消费者业务类型一致：一般消费者分组和主题对应，不同业务域对消息消费的要求不同，例如消息过滤属性、消费重试策略不同。因此，不同业务域主题的消费建议使用不同的消费者分组，避免一个消费者分组消费超过10个主题。</li></ul><p><strong>消费者分组管理尽量避免自动化机制</strong></p><p>在 Apache RocketMQ 架构中，消费分组属于状态管理类的逻辑资源，每个消费分组都会涉及关联的消费状态、堆积信息、可观测指标和监控采集数据。因此，生产环境需要严格管理消费者分组资源，请勿随意进行增、删、改、查操作。</p><p>Apache RocketMQ 虽然提供了自动创建消费者分组的功能，但是建议仅在测试环境使用，生产环境请勿打开，避免产生大量消费者分组，无法管理和回收，且浪费系统资源。</p><h2 id="消费者-Consumer-1"><a href="#消费者-Consumer-1" class="headerlink" title="消费者-Consumer"></a>消费者-Consumer</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>消费者是 Apache RocketMQ 中用来接收并处理消息的运行实体。 消费者通常被集成在业务系统中，从 Apache RocketMQ 服务端获取消息，并将消息转化成业务可理解的信息，供业务逻辑处理。</p><p>在消息消费端，可以定义如下传输行为：</p><ul><li>消费者身份：消费者必须关联一个指定的消费者分组，以获取分组内统一定义的行为配置和消费状态。</li><li>消费者类型：Apache RocketMQ 面向不同的开发场景提供了多样的消费者类型，包括PushConsumer类型、SimpleConsumer类型、PullConsumer类型（仅推荐流处理场景使用）等。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/06consumertype">消费者分类</a>。</li><li>消费者本地运行配置：消费者根据不同的消费者类型，控制消费者客户端本地的运行配置。例如消费者客户端的线程数，消费并发度等，实现不同的传输效果。</li></ul><h3 id="内部属性-4"><a href="#内部属性-4" class="headerlink" title="内部属性"></a>内部属性</h3><p><strong>消费者分组名称</strong></p><ul><li>定义：当前消费者关联的消费者分组名称，消费者必须关联到指定的消费者分组，通过消费者分组获取消费行为。更多信息，请参见<a href="https://rocketmq.apache.org/zh/docs/domainModel/07consumergroup">消费者分组（ConsumerGroup）</a>。</li><li>取值：消费者分组为Apache RocketMQ 的逻辑资源，需要您提前通过控制台或OpenAPI创建。具体命名格式，请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">使用限制</a>。</li></ul><p><strong>客户端ID</strong></p><ul><li>定义：消费者客户端的标识，用于区分不同的消费者。集群内全局唯一。</li><li>取值：客户端ID由Apache RocketMQ 的SDK自动生成，主要用于日志查看、问题定位等运维场景，不支持修改。</li></ul><p><strong>通信参数</strong></p><ul><li>接入点信息 <strong>（必选）</strong> ：连接服务端的接入地址，用于识别服务端集群。 接入点必须按格式配置，建议使用域名，避免使用IP地址，防止节点变更无法进行热点迁移。</li><li>身份认证信息 <strong>（可选）</strong> ：客户端用于身份验证的凭证信息。 仅在服务端开启身份识别和认证时需要传输。</li><li>请求超时时间 <strong>（可选）</strong> ：客户端网络请求调用的超时时间。取值范围和默认值，请参见<a href="https://rocketmq.apache.org/zh/docs/introduction/03limits">参数限制</a>。</li></ul><p><strong>预绑定订阅关系列表</strong></p><ul><li><p>定义：指定消费者的订阅关系列表。 Apache RocketMQ 服务端可在消费者初始化阶段，根据预绑定的订阅关系列表对目标主题进行权限及合法性校验，无需等到应用启动后才能校验。</p></li><li><p>取值：建议在消费者初始化阶段明确订阅关系即要订阅的主题列表，若未设置，或订阅的主题动态变更，Apache RocketMQ 会对目标主题进行动态补充校验。</p></li></ul><p><strong>消费监听器</strong></p><ul><li>定义：Apache RocketMQ 服务端将消息推送给消费者后，消费者调用消息消费逻辑的监听器。</li><li>取值：由消费者客户端本地配置。</li><li>约束：使用PushConsumer类型的消费者消费消息时，消费者客户端必须设置消费监听器。消费者类型的具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/06consumertype">消费者分类</a>。</li></ul><h3 id="行为约束-4"><a href="#行为约束-4" class="headerlink" title="行为约束"></a>行为约束</h3><p>Apache RocketMQ 要求同一分组下的所有消费者以下消费行为保持一致：</p><ul><li><strong>投递顺序</strong></li><li><strong>消费重试策略</strong></li></ul><h3 id="使用建议-4"><a href="#使用建议-4" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>不建议在单一进程内创建大量消费者</strong></p><p>Apache RocketMQ 的消费者在通信协议层面支持非阻塞传输模式，网络通信效率较高，并且支持多线程并发访问。因此，大部分场景下，单一进程内同一个消费分组只需要初始化唯一的一个消费者即可，开发过程中应避免以相同的配置初始化多个消费者。</p><p><strong>不建议频繁创建和销毁消费者</strong></p><p>Apache RocketMQ 的消费者是可以重复利用的底层资源，类似数据库的连接池。因此不需要在每次接收消息时动态创建消费者，且在消费完成后销毁消费者。这样频繁地创建销毁会在服务端产生大量短连接请求，严重影响系统性能。</p><ul><li><p>正确示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Consumer</span> c <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">Message</span> m<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//process message</span>    <span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>典型错误示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Consumer</span> c <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Message</span> m<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//process message</span>    c<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><h2 id="订阅关系-Subscription-1"><a href="#订阅关系-Subscription-1" class="headerlink" title="订阅关系-Subscription"></a>订阅关系-Subscription</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>订阅关系是 Apache RocketMQ 系统中消费者获取消息、处理消息的规则和状态配置。</p><p>订阅关系由消费者分组动态注册到服务端系统，并在后续的消息传输中按照订阅关系定义的过滤规则进行消息匹配和消费进度维护。</p><p>通过配置订阅关系，可控制如下传输行为：</p><ul><li>消息过滤规则：用于控制消费者在消费消息时，选择主题内的哪些消息进行消费，设置消费过滤规则可以高效地过滤消费者需要的消息集合，灵活根据不同的业务场景设置不同的消息接收范围。具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/07messagefilter">消息过滤</a>。</li><li>消费状态：Apache RocketMQ 服务端默认提供订阅关系持久化的能力，即消费者分组在服务端注册订阅关系后，当消费者离线并再次上线后，可以获取离线前的消费进度并继续消费。</li></ul><h2 id="订阅关系判断规则"><a href="#订阅关系判断规则" class="headerlink" title="订阅关系判断规则"></a>订阅关系判断规则</h2><p>Apache RocketMQ 的订阅关系按照消费者分组和主题粒度设计，因此，一个订阅关系指的是指定某个消费者分组对于某个主题的订阅，判断原则如下：</p><ul><li><p>不同消费者分组对于同一个主题的订阅相互独立如下图所示，消费者分组Group A和消费者分组Group B分别以不同的订阅关系订阅了同一个主题Topic A，这两个订阅关系互相独立，可以各自定义，不受影响。</p><img src="/2023/03/23/rocketmq/subscription_diff_group-0b215b9bb822b4bf43c388e9155ecca1.png" class="" title="订阅关系不同分组"></li><li><p>同一个消费者分组对于不同主题的订阅也相互独立如下图所示，消费者分组Group A订阅了两个主题Topic A和Topic B，对于Group A中的消费者来说，订阅的Topic A为一个订阅关系，订阅的Topic B为另外一个订阅关系，且这两个订阅关系互相独立，可以各自定义，不受影响。</p><p><img src="https://rocketmq.apache.org/zh/assets/images/subscription_one_group-77bd92b987e8264ad3c5f27b29463942.png" alt="订阅关系相同分组"></p></li></ul><h3 id="内部属性-5"><a href="#内部属性-5" class="headerlink" title="内部属性"></a>内部属性</h3><p><strong>过滤类型</strong></p><ul><li>定义：消息过滤规则的类型。订阅关系中设置消息过滤规则后，系统将按照过滤规则匹配主题中的消息，只将符合条件的消息投递给消费者消费，实现消息的再次分类。</li><li>取值：<ul><li>TAG过滤：按照Tag字符串进行全文过滤匹配。</li><li>SQL92过滤：按照SQL语法对消息属性进行过滤匹配。</li></ul></li></ul><p><strong>过滤表达式</strong></p><ul><li>定义：自定义的过滤规则表达式。</li><li>取值：具体取值规范，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/07messagefilter">过滤表达式语法规范</a>。</li></ul><h3 id="行为约束-5"><a href="#行为约束-5" class="headerlink" title="行为约束"></a>行为约束</h3><p><strong>订阅关系一致</strong></p><p>Apache RocketMQ 是按照消费者分组粒度管理订阅关系，因此，同一消费者分组内的消费者在消费逻辑上必须保持一致，否则会出现消费冲突，导致部分消息消费异常。</p><ul><li><p>正确示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer c1</span><span class="token class-name">Consumer</span> c1 <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicA<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Consumer c2</span><span class="token class-name">Consumer</span> c2 <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicA<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>错误示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer c1</span><span class="token class-name">Consumer</span> c1 <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicA<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Consumer c2Consumer </span>c2 <span class="token operator">=</span> <span class="token class-name">ConsumerBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topicA<span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​</p><h3 id="使用建议-5"><a href="#使用建议-5" class="headerlink" title="使用建议"></a>使用建议</h3><p><strong>建议不要频繁修改订阅关系</strong></p><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><h3 id="普通消息"><a href="#普通消息" class="headerlink" title="普通消息"></a>普通消息</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>微服务解耦</p><img src="/2023/03/23/rocketmq/onlineprocess-cfd38e3de3a5fc1ee76f17331cc5b828.png" class="" title="在线消息处理"><p>如上图所示，以在线的电商交易场景为例，上游订单系统将用户下单支付这一业务事件封装成独立的普通消息并发送至Apache RocketMQ服务端，下游按需从服务端订阅消息并按照本地消费逻辑处理下游任务。每个消息之间都是相互独立的，且不需要产生关联。</p></li><li><p>数据集成传输</p><img src="/2023/03/23/rocketmq/offlineprocess-027f6f1642db3d78ff29890abbe38bf8.png" class="" title="数据传输"><p>如上图所示，以离线的日志收集场景为例，通过埋点组件收集前端应用的相关操作日志，并转发到 Apache RocketMQ 。每条消息都是一段日志数据，Apache RocketMQ 不做任何处理，只需要将日志数据可靠投递到下游的存储系统和分析系统即可，后续功能由后端应用完成。</p></li></ol><h3 id="功能原理"><a href="#功能原理" class="headerlink" title="功能原理"></a>功能原理</h3><p>普通消息是Apache RocketMQ基本消息功能，支持生产者和消费者的异步解耦通信。</p><p>普通消息生命周期</p><img src="/2023/03/23/rocketmq/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66.png" class="" title="生命周期"><ul><li>初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li>待消费：消息被发送到服务端，对消费者可见，等待消费者消费的状态。</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，Apache RocketMQ会对消息进行重试处理。</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。 Apache RocketMQ默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。</li><li>消息删除：Apache RocketMQ按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ul><h4 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h4><p>普通消息仅支持使用MessageType为Normal主题，即普通消息只能发送至类型为普通消息的主题中，发送的消息的类型必须和主题的类型一致。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//普通消息发送。</span><span class="token class-name">MessageBuilder</span> messageBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>    <span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span>    <span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">"messageKey"</span><span class="token punctuation">)</span>    <span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span>    <span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">"messageTag"</span><span class="token punctuation">)</span>    <span class="token comment">//消息体。</span>    <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"messageBody"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//发送消息，需要关注发送结果，并捕获失败等异常。</span>    <span class="token class-name">SendReceipt</span> sendReceipt <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendReceipt<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//消费示例一：使用PushConsumer消费普通消息，只需要在消费监听器中处理即可。</span><span class="token class-name">MessageListener</span> messageListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumeResult</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">MessageView</span> messageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据消费结果返回状态。</span>        <span class="token keyword">return</span> <span class="token class-name">ConsumeResult</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//消费示例二：使用SimpleConsumer消费普通消息，主动获取消息进行消费处理并提交消费结果。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageView</span><span class="token punctuation">&gt;</span></span> messageViewList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    messageViewList <span class="token operator">=</span> simpleConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageViewList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费处理完成后，需要主动调用ACK提交消费结果。</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleConsumer<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="使用建议-6"><a href="#使用建议-6" class="headerlink" title="使用建议"></a>使用建议</h4><p><strong>设置全局唯一业务索引键，方便问题追踪</strong></p><p>Apache RocketMQ支持自定义索引键（消息的Key），在消息查询和轨迹查询时，可以通过索引键高效精确地查询到消息。</p><p>因此，发送消息时，建议设置业务上唯一的信息作为索引，方便后续快速定位消息。例如，订单ID，用户ID等。</p><h3 id="定时-x2F-延时消息"><a href="#定时-x2F-延时消息" class="headerlink" title="定时/延时消息"></a>定时/延时消息</h3><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>分布式定时调度</p><img src="/2023/03/23/rocketmq/delaywork-e9647b539ae35898102a336a27d3ad94.png" class="" title="定时消息"><p>在分布式定时调度场景下，需要实现各类精度的定时任务，例如每天5点执行文件清理，每隔2分钟触发一次消息推送等需求。传统基于数据库的定时调度方案在分布式场景下，性能不高，实现复杂。基于 Apache RocketMQ 的定时消息可以封装出多种类型的定时触发器。</p></li><li><p>任务超时处理</p><img src="/2023/03/23/rocketmq/scheduletask-1944aea7bf2a4a4c56be4d90ead4f1f3.png" class="" title="超时任务处理"><p>以电商交易场景为例，订单下单后暂未支付，此时不可以直接关闭订单，而是需要等待一段时间后才能关闭订单。使用 Apache RocketMQ 定时消息可以实现超时任务的检查触发。</p><p>基于定时消息的超时任务处理具备如下优势：</p><ul><li>精度高、开发门槛低：基于消息通知方式不存在定时阶梯间隔。可以轻松实现任意精度事件触发，无需业务去重。</li><li>高性能可扩展：传统的数据库扫描方式较为复杂，需要频繁调用接口扫描，容易产生性能瓶颈。 Apache RocketMQ 的定时消息具有高并发和水平扩展的能力。</li></ul></li></ol><h4 id="功能原理-1"><a href="#功能原理-1" class="headerlink" title="功能原理"></a>功能原理</h4><h5 id="定时设置原则"><a href="#定时设置原则" class="headerlink" title="定时设置原则"></a>定时设置原则</h5><ul><li>Apache RocketMQ 定时消息设置的定时时间是一个预期触发的系统时间戳，延时时间也需要转换成当前系统时间后的某一个时间戳，而不是一段延时时长。</li><li>定时时间的格式为毫秒级的Unix时间戳，您需要将要设置的时刻转换成时间戳形式。</li><li>定时时间必须设置在定时时长范围内，超过范围则定时不生效，服务端会立即投递消息。</li><li>定时时长最大值默认为24小时，不支持自定义修改</li><li>定时时间必须设置为当前时间之后，若设置到当前时间之前，则定时不生效，服务端会立即投递消息。</li></ul><h5 id="定时消息生命周期"><a href="#定时消息生命周期" class="headerlink" title="定时消息生命周期"></a>定时消息生命周期</h5><img src="/2023/03/23/rocketmq/lifecyclefordelay-2ce8278df69cd026dd11ffd27ab09a17.png" class="" title="定时消息生命周期"><ul><li>初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li>定时中：消息被发送到服务端，和普通消息不同的是，服务端不会直接构建消息索引，而是会将定时消息单独存储在定时存储系统中，等待定时时刻到达。</li><li>待消费：定时时刻到达后，服务端将消息重新写入普通存储引擎，对下游消费者可见，等待消费者消费的状态。</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，Apache RocketMQ会对消息进行重试处理。</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。 Apache RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。</li><li>消息删除：Apache RocketMQ按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ul><h4 id="使用限制-1"><a href="#使用限制-1" class="headerlink" title="使用限制"></a>使用限制</h4><p><strong>消息类型一致性</strong></p><p>定时消息仅支持在 MessageType为Delay 的主题内使用，即定时消息只能发送至类型为定时消息的主题中，发送的消息的类型必须和主题的类型一致。</p><p><strong>定时精度约束</strong></p><p>Apache RocketMQ 定时消息的定时时长参数精确到毫秒级，但是默认精度为1000ms，即定时消息为秒级精度。</p><p>Apache RocketMQ 定时消息的状态支持持久化存储，系统由于故障重启后，仍支持按照原来设置的定时时间触发消息投递。若存储系统异常重启，可能会导致定时消息投递出现一定延迟。</p><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定时/延时消息发送</span><span class="token class-name">MessageBuilder</span> messageBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//以下示例表示：延迟时间为10分钟之后的Unix时间戳。</span><span class="token class-name">Long</span> deliverTimeStamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10L</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>        <span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span>        <span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">"messageKey"</span><span class="token punctuation">)</span>        <span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span>        <span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">"messageTag"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setDeliveryTimestamp</span><span class="token punctuation">(</span>deliverTimeStamp<span class="token punctuation">)</span>        <span class="token comment">//消息体</span>        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"messageBody"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//发送消息，需要关注发送结果，并捕获失败等异常。</span>    <span class="token class-name">SendReceipt</span> sendReceipt <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendReceipt<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//消费示例一：使用PushConsumer消费定时消息，只需要在消费监听器处理即可。</span><span class="token class-name">MessageListener</span> messageListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumeResult</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">MessageView</span> messageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">.</span><span class="token function">getDeliveryTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据消费结果返回状态。</span>        <span class="token keyword">return</span> <span class="token class-name">ConsumeResult</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//消费示例二：使用SimpleConsumer消费定时消息，主动获取消息进行消费处理并提交消费结果。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageView</span><span class="token punctuation">&gt;</span></span> messageViewList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    messageViewList <span class="token operator">=</span> simpleConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageViewList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费处理完成后，需要主动调用ACK提交消费结果。</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleConsumer<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h3><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>撮合交易</p><img src="/2023/03/23/rocketmq/fifo_trade-a8bac55b8fb3fceb995891c64c2f0a5a.png" class="" title="交易撮合"><p>以证券、股票交易撮合场景为例，对于出价相同的交易单，坚持按照先出价先交易的原则，下游处理订单的系统需要严格按照出价顺序来处理订单。</p></li><li><p>数据实时增量同步</p><img src="/2023/03/23/rocketmq/tradewithfifo-30884dfeb909c54d7379641fcec437fa.png" class="" title="顺序消息"><p>以数据库变更增量同步场景为例，上游源端数据库按需执行增删改操作，将二进制操作日志作为消息，通过 Apache RocketMQ 传输到下游搜索系统，下游系统按顺序还原消息数据，实现状态数据按序刷新。如果是普通消息则可能会导致状态混乱，和预期操作结果不符，基于顺序消息可以实现下游状态和上游操作结果一致。</p></li></ol><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="如何保证消息顺序性"><a href="#如何保证消息顺序性" class="headerlink" title="如何保证消息顺序性"></a>如何保证消息顺序性</h5><ul><li><p>生产顺序性</p><p>Apache RocketMQ 通过生产者和服务端的协议保障单个生产者串行地发送消息，并按序存储和持久化。</p><p>如需保证消息生产的顺序性，则必须满足以下条件：</p><ul><li>单一生产者：消息生产的顺序性仅支持单一生产者，不同生产者分布在不同的系统，即使设置相同的消息组，不同生产者之间产生的消息也无法判定其先后顺序。</li><li>串行发送：Apache RocketMQ 生产者客户端支持多线程安全访问，但如果生产者使用多线程并行发送，则不同线程间产生的消息将无法判定其先后顺序。</li></ul><p>满足以上条件的生产者，将顺序消息发送至 Apache RocketMQ 后，会保证设置了同一消息组的消息，按照发送顺序存储在同一队列中。服务端顺序存储逻辑如下：</p><ul><li>相同消息组的消息按照先后顺序被存储在同一个队列。</li><li>不同消息组的消息可以混合在同一个队列中，且不保证连续。</li></ul><img src="/2023/03/23/rocketmq/fifomessagegroup-aad0a1b7e64089075db956c0eca0cbf4.png" class="" title="顺序存储逻辑"></li><li><p>消费顺序性</p><p>Apache RocketMQ 通过消费者和服务端的协议保障消息消费严格按照存储的先后顺序来处理。</p><p>如需保证消息消费的顺序性，则必须满足以下条件：</p><ul><li><p>投递顺序</p><p>Apache RocketMQ 通过客户端SDK和服务端通信协议保障消息按照服务端存储顺序投递，但业务方消费消息时需要严格按照接收—处理—应答的语义处理消息，避免因异步处理导致消息乱序。</p><p>备注</p><p>消费者类型为PushConsumer时， Apache RocketMQ 保证消息按照存储顺序一条一条投递给消费者，若消费者类型为SimpleConsumer，则消费者有可能一次拉取多条消息。此时，消息消费的顺序性需要由业务方自行保证。消费者类型的具体信息，请参见<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/06consumertype">消费者分类</a>。</p></li><li><p>有限重试</p><p>Apache RocketMQ 顺序消息投递仅在重试次数限定范围内，即一条消息如果一直重试失败，超过最大重试次数后将不再重试，跳过这条消息消费，不会一直阻塞后续消息处理。</p><p>对于需要严格保证消费顺序的场景，请务设置合理的重试次数，避免参数不合理导致消息乱序。</p></li></ul></li></ul><h5 id="顺序消息生命周期"><a href="#顺序消息生命周期" class="headerlink" title="顺序消息生命周期"></a>顺序消息生命周期</h5><img src="/2023/03/23/rocketmq/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66-167954204080210.png" class="" title="生命周期"><p>备注</p><ul><li>消息消费失败或消费超时，会触发服务端重试逻辑，重试消息属于新的消息，原消息的生命周期已结束。</li><li>顺序消息消费失败进行消费重试时，为保障消息的顺序性，后续消息不可被消费，必须等待前面的消息消费完成后才能被处理。</li></ul><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//顺序消息发送。</span><span class="token class-name">MessageBuilder</span> messageBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>        <span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span>        <span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">"messageKey"</span><span class="token punctuation">)</span>        <span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span>        <span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">"messageTag"</span><span class="token punctuation">)</span>        <span class="token comment">//设置顺序消息的排序分组，该分组尽量保持离散，避免热点排序分组。</span>        <span class="token punctuation">.</span><span class="token function">setMessageGroup</span><span class="token punctuation">(</span><span class="token string">"fifoGroup001"</span><span class="token punctuation">)</span>        <span class="token comment">//消息体。</span>        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"messageBody"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//发送消息，需要关注发送结果，并捕获失败等异常</span>    <span class="token class-name">SendReceipt</span> sendReceipt <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendReceipt<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//消费顺序消息时，需要确保当前消费者分组是顺序投递模式，否则仍然按并发乱序投递。</span><span class="token comment">//消费示例一：使用PushConsumer消费顺序消息，只需要在消费监听器处理即可。</span><span class="token class-name">MessageListener</span> messageListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumeResult</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">MessageView</span> messageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据消费结果返回状态。</span>        <span class="token keyword">return</span> <span class="token class-name">ConsumeResult</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//消费示例二：使用SimpleConsumer消费顺序消息，主动获取消息进行消费处理并提交消费结果。</span><span class="token comment">//需要注意的是，同一个MessageGroup的消息，如果前序消息没有消费完成，再次调用Receive是获取不到后续消息的。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageView</span><span class="token punctuation">&gt;</span></span> messageViewList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    messageViewList <span class="token operator">=</span> simpleConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageViewList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费处理完成后，需要主动调用ACK提交消费结果。</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleConsumer<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h3><p>而基于Apache RocketMQ实现的分布式事务消息功能，在普通消息基础上，支持二阶段的提交能力。将二阶段提交和本地事务绑定，实现全局提交结果的一致性。</p><img src="/2023/03/23/rocketmq/tradewithtrans-25be17fcdedb8343a0d2633e693d126d.png" class="" title="事务消息"><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="事务消息处理流程"><a href="#事务消息处理流程" class="headerlink" title="事务消息处理流程"></a>事务消息处理流程</h5><img src="/2023/03/23/rocketmq/transflow-0b07236d124ddb814aeaf5f6b5f3f72c.png" class="" title="事务消息"><ol><li>生产者将消息发送至Apache RocketMQ服务端。</li><li>Apache RocketMQ服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息被标记为”暂不能投递”，这种状态下的消息即为半事务消息。</li><li>生产者开始执行本地事务逻辑。</li><li>生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下：<ul><li>二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。</li><li>二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。</li></ul></li><li>在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。</li><li>生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。</li><li>生产者根据检查到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。</li></ol><h5 id="事务消息生命周期"><a href="#事务消息生命周期" class="headerlink" title="事务消息生命周期"></a>事务消息生命周期</h5><img src="/2023/03/23/rocketmq/lifecyclefortrans-fe4a49f1c9fdae5d590a64546722036f.png" class="" title="事务消息"><ul><li>初始化：半事务消息被生产者构建并完成初始化，待发送到服务端的状态。</li><li>事务待提交：半事务消息被发送到服务端，和普通消息不同，并不会直接被服务端持久化，而是会被单独存储到事务存储系统中，等待第二阶段本地事务返回执行结果后再提交。此时消息对下游消费者不可见。</li><li>消息回滚：第二阶段如果事务执行结果明确为回滚，服务端会将半事务消息回滚，该事务消息流程终止。</li><li>提交待消费：第二阶段如果事务执行结果明确为提交，服务端会将半事务消息重新存储到普通存储系统中，此时消息对下游消费者可见，等待被消费者获取并消费。</li><li>消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，Apache RocketMQ会对消息进行重试处理。</li><li>消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。 Apache RocketMQ默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。</li><li>消息删除：Apache RocketMQ按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。</li></ul><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p>事务消息相比普通消息发送时需要修改以下几点：</p><ul><li>发送事务消息前，需要开启事务并关联本地的事务执行。</li><li>为保证事务一致性，在构建生产者时，必须设置事务检查器和预绑定事务消息发送的主题列表，客户端内置的事务检查器会对绑定的事务主题做异常状态恢复。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//演示demo，模拟订单表查询服务，用来确认订单事务是否提交成功。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkOrderById</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//演示demo，模拟本地事务的执行结果。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doLocalTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClientException</span> <span class="token punctuation">{</span>    <span class="token class-name">ClientServiceProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MessageBuilder</span> messageBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造事务生产者：事务消息需要生产者构建一个事务检查器，用于检查确认异常半事务的中间状态。</span>    <span class="token class-name">Producer</span> producer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">newProducerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setTransactionChecker</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">/**                 * 事务检查器一般是根据业务的ID去检查本地事务是否正确提交还是回滚，此处以订单ID属性为例。                 * 在订单表找到了这个订单，说明本地事务插入订单的操作已经正确提交；如果订单表没有订单，说明本地事务已经回滚。                 */</span>                <span class="token keyword">final</span> <span class="token class-name">String</span> orderId <span class="token operator">=</span> messageView<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"OrderId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 错误的消息，直接返回Rollback。</span>                    <span class="token keyword">return</span> <span class="token class-name">TransactionResolution</span><span class="token punctuation">.</span><span class="token constant">ROLLBACK</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">checkOrderById</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">TransactionResolution</span><span class="token punctuation">.</span><span class="token constant">COMMIT</span> <span class="token operator">:</span> <span class="token class-name">TransactionResolution</span><span class="token punctuation">.</span><span class="token constant">ROLLBACK</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启事务分支。</span>    <span class="token keyword">final</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        transaction <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//事务分支开启失败，直接退出。</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>            <span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span>            <span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">"messageKey"</span><span class="token punctuation">)</span>            <span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span>            <span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">"messageTag"</span><span class="token punctuation">)</span>            <span class="token comment">//一般事务消息都会设置一个本地事务关联的唯一ID，用来做本地事务回查的校验。</span>            <span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"OrderId"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span>            <span class="token comment">//消息体。</span>            <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"messageBody"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送半事务消息</span>    <span class="token keyword">final</span> <span class="token class-name">SendReceipt</span> sendReceipt<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        sendReceipt <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//半事务消息发送失败，事务可以直接退出并回滚。</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行本地事务，并确定本地事务结果。     * 1. 如果本地事务提交成功，则提交消息事务。     * 2. 如果本地事务提交失败，则回滚消息事务。     * 3. 如果本地事务未知异常，则不处理，等待事务消息回查。     *     */</span>    <span class="token keyword">boolean</span> localTransactionOk <span class="token operator">=</span> <span class="token function">doLocalTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localTransactionOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 业务可以自身对实时性的要求选择是否重试，如果放弃重试，可以依赖事务消息回查机制进行事务状态的提交。</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 建议记录异常信息，回滚异常时可以无需重试，依赖事务消息回查机制进行事务状态的提交。</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="消息发送重试和流控机制"><a href="#消息发送重试和流控机制" class="headerlink" title="消息发送重试和流控机制"></a>消息发送重试和流控机制</h2><h3 id="重试触发条件"><a href="#重试触发条件" class="headerlink" title="重试触发条件"></a>重试触发条件</h3><p>触发消息发送重试机制的条件如下：</p><ul><li>客户端消息发送请求调用失败或请求超时</li><li>网络异常造成连接失败或请求超时。</li><li>服务端节点处于重启或下线等状态造成连接失败。</li><li>服务端运行慢造成请求超时。</li><li>服务端返回失败错误码<ul><li>系统逻辑错误：因运行逻辑不正确造成的错误。</li><li>系统流控错误：因容量超限造成的流控错误。</li></ul></li></ul><h3 id="重试流程"><a href="#重试流程" class="headerlink" title="重试流程"></a>重试流程</h3><p>生产者在初始化时设置消息发送最大重试次数，当出现上述触发条件的场景时，生产者客户端会按照设置的重试次数一直重试发送消息，直到消息发送成功或达到最大重试次数重试结束，并在最后一次重试失败后返回调用错误响应。</p><ul><li>同步发送：调用线程会一直阻塞，直到某次重试成功或最终重试失败，抛出错误码和异常。</li><li>异步发送：调用线程不会阻塞，但调用结果会通过异常事件或者成功事件返回。</li></ul><h3 id="重试间隔"><a href="#重试间隔" class="headerlink" title="重试间隔"></a>重试间隔</h3><ul><li>除服务端返回系统流控错误场景，其他触发条件触发重试后，均会立即进行重试，无等待间隔。</li><li>若由于服务端返回流控错误触发重试，系统会按照指数退避策略进行延迟重试。指数退避算法通过以下参数控制重试行为：<ul><li>INITIAL_BACKOFF： 第一次失败重试前后需等待多久，默认值：1秒。</li><li>MULTIPLIER ：指数退避因子，即退避倍率，默认值：1.6。</li><li>JITTER ：随机抖动因子，默认值：0.2。</li><li>MAX_BACKOFF ：等待间隔时间上限，默认值：120秒</li><li>MIN_CONNECT_TIMEOUT ：最短重试间隔，默认值：20秒。</li></ul></li></ul><p><strong>建议算法如下：</strong></p><pre class="language-unknow" data-language="unknow"><code class="language-unknow">ConnectWithBackoff()  current_backoff = INITIAL_BACKOFF  current_deadline = now() + INITIAL_BACKOFF  while (TryConnect(Max(current_deadline, now() + MIN_CONNECT_TIMEOUT))!= SUCCESS)    SleepUntil(current_deadline)    current_backoff = Min(current_backoff * MULTIPLIER, MAX_BACKOFF)    current_deadline = now() + current_backoff + UniformRandom(-JITTER * current_backoff, JITTER * current_backoff)</code></pre><h3 id="消息流控触发条件"><a href="#消息流控触发条件" class="headerlink" title="消息流控触发条件"></a>消息流控触发条件</h3><p>Apache RocketMQ 的消息流控触发条件如下：</p><ul><li>存储压力大：参考<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/09consumerprogress">消费进度管理</a>的原理机制，消费者分组的初始消费位点为当前队列的最大消费位点。若某些场景例如业务上新等需要回溯到指定时刻前开始消费，此时队列的存储压力会瞬间飙升，触发消息流控。</li><li>服务端请求任务排队溢出：若消费者消费能力不足，导致队列中有大量堆积消息，当堆积消息超过一定数量后会触发消息流控，减少下游消费系统压力。</li></ul><h3 id="流控行为"><a href="#流控行为" class="headerlink" title="流控行为"></a>流控行为</h3><p>当系统触发消息发送流控时，客户端会收到系统限流错误和异常，错误码信息如下：</p><ul><li>reply-code：530</li><li>reply-text：TOO_MANY_REQUESTS</li></ul><p>客户端收到系统流控错误码后，会根据指数退避策略进行消息发送重试。</p><h2 id="消费者分类"><a href="#消费者分类" class="headerlink" title="消费者分类"></a>消费者分类</h2><p>Apache RocketMQ 支持 PushConsumer 、 SimpleConsumer 以及 PullConsumer 这三种类型的消费者</p><img src="/2023/03/23/rocketmq/consumerflow-eaa625a6a01a048a155a3809a603529a.png" class="" title="消息消费流程"><p>如上图所示， Apache RocketMQ 的消费者处理消息时主要经过以下阶段：消息获取—&gt;消息处理—&gt;消费状态提交。</p><table><thead><tr><th>对比项</th><th>PushConsumer</th><th>SimpleConsumer</th><th>PullConsumer</th></tr></thead><tbody><tr><td>接口方式</td><td>使用监听器回调接口返回消费结果，消费者仅允许在监听器范围内处理消费逻辑。</td><td>业务方自行实现消息处理，并主动调用接口返回消费结果。</td><td>业务方自行按队列拉取消息，并可选择性地提交消费结果</td></tr><tr><td>消费并发度管理</td><td>由SDK管理消费并发度。</td><td>由业务方消费逻辑自行管理消费线程。</td><td>由业务方消费逻辑自行管理消费线程。</td></tr><tr><td>负载均衡粒度</td><td>5.0 SDK是消息粒度，更均衡，早期版本是队列维度</td><td>消息粒度，更均衡</td><td>队列粒度，吞吐攒批性能更好，但容易不均衡</td></tr><tr><td>接口灵活度</td><td>高度封装，不够灵活。</td><td>原子接口，可灵活自定义。</td><td>原子接口，可灵活自定义。</td></tr><tr><td>适用场景</td><td>适用于无自定义流程的业务消息开发场景。</td><td>适用于需要高度自定义业务流程的业务开发场景。</td><td>仅推荐在流处理框架场景下集成使用</td></tr></tbody></table><h3 id="PushConsumer"><a href="#PushConsumer" class="headerlink" title="PushConsumer"></a>PushConsumer</h3><p>PushConsumers是一种高度封装的消费者类型，消费消息仅通过消费监听器处理业务并返回消费结果。消息的获取、消费状态提交以及消费重试都通过 Apache RocketMQ 的客户端SDK完成。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a><strong>使用方式</strong></h4><p>PushConsumer的使用方式比较固定，在消费者初始化时注册一个消费监听器，并在消费监听器内部实现消息处理逻辑。由 Apache RocketMQ 的SDK在后台完成消息获取、触发监听器调用以及进行消息重试处理。</p><p>示例代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费示例：使用PushConsumer消费普通消息。</span><span class="token class-name">ClientServiceProvider</span> provider <span class="token operator">=</span> <span class="token class-name">ClientServiceProvider</span><span class="token punctuation">.</span><span class="token function">loadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"YourTopic"</span><span class="token punctuation">;</span><span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">"YourFilterTag"</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PushConsumer</span> pushConsumer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">newPushConsumerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 设置消费者分组。</span>    <span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span><span class="token string">"YourConsumerGroup"</span><span class="token punctuation">)</span>    <span class="token comment">// 设置接入点。</span>    <span class="token punctuation">.</span><span class="token function">setClientConfiguration</span><span class="token punctuation">(</span><span class="token class-name">ClientConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEndpoints</span><span class="token punctuation">(</span><span class="token string">"YourEndpoint"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 设置预绑定的订阅关系。</span>    <span class="token punctuation">.</span><span class="token function">setSubscriptionExpressions</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 设置消费监听器。</span>    <span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">ConsumeResult</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">MessageView</span> messageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 消费消息并返回处理结果。</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeResult</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                </code></pre><p>PushConsumer的消费监听器执行结果分为以下三种情况：</p><ul><li>返回消费成功：以Java SDK为例，返回<code>ConsumeResult.SUCCESS</code>，表示该消息处理成功，服务端按照消费结果更新消费进度。</li><li>返回消费失败：以Java SDK为例，返回<code>ConsumeResult.FAILURE</code>，表示该消息处理失败，需要根据消费重试逻辑判断是否进行重试消费。</li><li>出现非预期失败：例如抛异常等行为，该结果按照消费失败处理，需要根据消费重试逻辑判断是否进行重试消费。</li></ul><p>PushConsumer 消费消息时，若消息处理逻辑出现预期之外的阻塞导致消息处理一直无法执行成功，SDK会按照消费超时处理强制提交消费失败结果，并按照消费重试逻辑进行处理。</p><h4 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h4><p>在PushConsumer类型中，消息的实时处理能力是基于SDK内部的典型Reactor线程模型实现的。如下图所示，SDK内置了一个长轮询线程，先将消息异步拉取到SDK内置的缓存队列中，再分别提交到消费线程中，触发监听器执行本地消费逻辑。</p><img src="/2023/03/23/rocketmq/pushconsumer-26b909b090d4f911a40d5050d3ceba1d.png" class="" title="PushConsumer原理"><p>可靠性重试</p><p>PushConsumer 消费者类型中，客户端SDK和消费逻辑的唯一边界是消费监听器接口。客户端SDK严格按照监听器的返回结果判断消息是否消费成功，并做可靠性重试。所有消息必须以同步方式进行消费处理，并在监听器接口结束时返回调用结果，不允许再做异步化分发。</p><p>使用PushConsumer消费者消费时，不允许使用以下方式处理消息，否则 Apache RocketMQ 无法保证消息的可靠性。</p><ul><li>错误方式一：消息还未处理完成，就提前返回消费成功结果。此时如果消息消费失败，Apache RocketMQ 服务端是无法感知的，因此不会进行消费重试。</li><li>错误方式二：在消费监听器内将消息再次分发到自定义的其他线程，消费监听器提前返回消费结果。此时如果消息消费失败，Apache RocketMQ 服务端同样无法感知，因此也不会进行消费重试。</li></ul><p>适用场景</p><p>PushConsumer严格限制了消息同步处理及每条消息的处理超时时间，适用于以下场景：</p><ul><li>消息处理时间可预估：如果不确定消息处理耗时，经常有预期之外的长时间耗时的消息，PushConsumer的可靠性保证会频繁触发消息重试机制造成大量重复消息。</li><li>无异步化、高级定制场景：PushConsumer限制了消费逻辑的线程模型，由客户端SDK内部按最大吞吐量触发消息处理。该模型开发逻辑简单，但是不允许使用异步化和自定义处理流程。</li></ul><h3 id="SimpleConsumer"><a href="#SimpleConsumer" class="headerlink" title="SimpleConsumer"></a>SimpleConsumer</h3><p>SimpleConsumer 是一种接口原子型的消费者类型，消息的获取、消费状态提交以及消费重试都是通过消费者业务逻辑主动发起调用完成。</p><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><p>SimpleConsumer 的使用涉及多个接口调用，由业务逻辑按需调用接口获取消息，然后分发给业务线程处理消息，最后按照处理的结果调用提交接口，返回服务端当前消息的处理结果。示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费示例：使用 SimpleConsumer 消费普通消息，主动获取消息处理并提交。 </span><span class="token class-name">ClientServiceProvider</span> provider <span class="token operator">=</span> <span class="token class-name">ClientServiceProvider</span><span class="token punctuation">.</span><span class="token function">loadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"YourTopic"</span><span class="token punctuation">;</span><span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">"YourFilterTag"</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleConsumer</span> simpleConsumer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">newSimpleConsumerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 设置消费者分组。</span>        <span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span><span class="token string">"YourConsumerGroup"</span><span class="token punctuation">)</span>        <span class="token comment">// 设置接入点。</span>        <span class="token punctuation">.</span><span class="token function">setClientConfiguration</span><span class="token punctuation">(</span><span class="token class-name">ClientConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEndpoints</span><span class="token punctuation">(</span><span class="token string">"YourEndpoint"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 设置预绑定的订阅关系。</span>        <span class="token punctuation">.</span><span class="token function">setSubscriptionExpressions</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 设置从服务端接受消息的最大等待时间</span>        <span class="token punctuation">.</span><span class="token function">setAwaitDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// SimpleConsumer 需要主动获取消息，并处理。</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageView</span><span class="token punctuation">&gt;</span></span> messageViewList <span class="token operator">=</span> simpleConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageViewList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageView <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费处理完成后，需要主动调用 ACK 提交消费结果。</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleConsumer<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>messageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to ack message, messageId={}"</span><span class="token punctuation">,</span> messageView<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to receive message"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="可靠性重试"><a href="#可靠性重试" class="headerlink" title="可靠性重试"></a>可靠性重试</h4><p>SimpleConsumer消费者类型中，客户端SDK和服务端通过<code>ReceiveMessage</code>和<code>AckMessage</code>接口通信。客户端SDK如果处理消息成功则调用<code>AckMessage</code>接口；如果处理失败只需要不回复ACK响应，即可在定义的消费不可见时间到达后触发消费重试流程。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>消息处理时长不可控：如果消息处理时长无法预估，经常有长时间耗时的消息处理情况。建议使用SimpleConsumer消费类型，可以在消费时自定义消息的预估处理时长，若实际业务中预估的消息处理时长不符合预期，也可以通过接口提前修改。</li><li>需要异步化、批量消费等高级定制场景：SimpleConsumer在SDK内部没有复杂的线程封装，完全由业务逻辑自由定制，可以实现异步分发、批量消费等高级定制场景。</li><li>需要自定义消费速率：SimpleConsumer是由业务逻辑主动调用接口获取消息，因此可以自由调整获取消息的频率，自定义控制消费速率。</li></ul><h2 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h2><h3 id="消息过滤原理"><a href="#消息过滤原理" class="headerlink" title="消息过滤原理"></a>消息过滤原理</h3><img src="/2023/03/23/rocketmq/messagefilter0-ad2c8360f54b9a622238f8cffea12068.png" class="" title="消息过滤"><p>消息过滤主要通过以下几个关键流程实现：</p><ul><li>生产者：生产者在初始化消息时预先为消息设置一些属性和标签，用于后续消费时指定过滤目标。</li><li>消费者：消费者在初始化及后续消费流程中通过调用订阅关系注册接口，向服务端上报需要订阅指定主题的哪些消息，即过滤条件。</li><li>服务端：消费者获取消息时会触发服务端的动态过滤计算，Apache RocketMQ 服务端根据消费者上报的过滤条件的表达式进行匹配，并将符合条件的消息投递给消费者。</li></ul><h3 id="消息过滤分类"><a href="#消息过滤分类" class="headerlink" title="消息过滤分类"></a>消息过滤分类</h3><p>Apache RocketMQ 支持Tag标签过滤和SQL属性过滤，这两种过滤方式对比如下：</p><table><thead><tr><th>对比项</th><th>Tag标签过滤</th><th>SQL属性过滤</th></tr></thead><tbody><tr><td>过滤目标</td><td>消息的Tag标签。</td><td>消息的属性，包括用户自定义属性以及系统属性（Tag是一种系统属性）。</td></tr><tr><td>过滤能力</td><td>精准匹配。</td><td>SQL语法匹配。</td></tr><tr><td>适用场景</td><td>简单过滤场景、计算逻辑简单轻量。</td><td>复杂过滤场景、计算逻辑较复杂。</td></tr></tbody></table><h3 id="Tag标签过滤"><a href="#Tag标签过滤" class="headerlink" title="Tag标签过滤"></a>Tag标签过滤</h3><p>Tag标签过滤方式是 Apache RocketMQ 提供的基础消息过滤能力，基于生产者为消息设置的Tag标签进行匹配。生产者在发送消息时，设置消息的Tag标签，消费者需指定已有的Tag标签来进行匹配订阅。</p><p><strong>场景示例</strong></p><p>以下图电商交易场景为例，从客户下单到收到商品这一过程会生产一系列消息：</p><ul><li>订单消息</li><li>支付消息</li><li>物流消息</li></ul><p>这些消息会发送到名称为Trade_Topic的Topic中，被各个不同的下游系统所订阅：</p><ul><li>支付系统：只需订阅支付消息。</li><li>物流系统：只需订阅物流消息。</li><li>交易成功率分析系统：需订阅订单和支付消息。</li><li>实时计算系统：需要订阅所有和交易相关的消息。</li></ul><p>过滤效果如下图所示：</p><img src="/2023/03/23/rocketmq/messagefilter-09e82bf396d7c4100ed742e8d0d2c185.png" class="" title="Tag过滤"><p><strong>Tag标签设置</strong></p><ul><li>Tag由生产者发送消息时设置，每条消息允许设置一个Tag标签。</li><li>Tag使用可见字符，建议长度不超过128字符。</li></ul><p><strong>Tag标签过滤规则</strong></p><p>Tag标签过滤为精准字符串匹配，过滤规则设置格式如下：</p><ul><li>单Tag匹配：过滤表达式为目标Tag。表示只有消息标签为指定目标Tag的消息符合匹配条件，会被发送给消费者。</li><li>多Tag匹配：多个Tag之间为或的关系，不同Tag间使用两个竖线（||）隔开。例如，Tag1||Tag2||Tag3，表示标签为Tag1或Tag2或Tag3的消息都满足匹配条件，都会被发送给消费者进行消费。</li><li>全部匹配：使用星号（*）作为全匹配表达式。表示主题下的所有消息都将被发送给消费者进行消费。</li></ul><h3 id="SQL属性过滤"><a href="#SQL属性过滤" class="headerlink" title="SQL属性过滤"></a>SQL属性过滤</h3><p>SQL属性过滤是 Apache RocketMQ 提供的高级消息过滤方式，通过生产者为消息设置的属性（Key）及属性值（Value）进行匹配。生产者在发送消息时可设置多个属性，消费者订阅时可设置SQL语法的过滤表达式过滤多个属性。</p><p><strong>场景示例</strong></p><p>以下图电商交易场景为例，从客户下单到收到商品这一过程会生产一系列消息，按照类型将消息分为订单消息和物流消息，其中给物流消息定义地域属性，按照地域分为杭州和上海：</p><ul><li>订单消息</li><li>物流消息<ul><li>物流消息且地域为杭州</li><li>物流消息且地域为上海</li></ul></li></ul><p>这些消息会发送到名称为Trade_Topic的Topic中，被各个不同的系统所订阅：</p><ul><li>物流系统1：只需订阅物流消息且消息地域为杭州。</li><li>物流系统2：只需订阅物流消息且消息地域为杭州或上海。</li><li>订单跟踪系统：只需订阅订单消息。</li><li>实时计算系统：需要订阅所有和交易相关的消息。</li></ul><p>过滤效果如下图所示：</p><img src="/2023/03/23/rocketmq/messagefilter2-dbf55cf4a63ac6d3b9c5f02603ce92ce.png" class="" title="sql过滤"><h4 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h4><table><thead><tr><th>语法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>判断属性不存在。</td><td><code>a IS NULL</code> ：属性a不存在。</td></tr><tr><td>IS NOT NULL</td><td>判断属性存在。</td><td><code>a IS NOT NULL</code>：属性a存在。</td></tr><tr><td><em>&gt;</em> &gt;= <em>&lt;</em> &lt;=</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。 <strong>说明</strong> 可转化为数字的字符串也被认为是数字。</td><td><em><code>a IS NOT NULL AND a &gt; 100</code>：属性a存在且属性a的值大于100。</em> <code>a IS NOT NULL AND a &gt; 'abc'</code>：错误示例，abc为字符串，不能用于比较大小。</td></tr><tr><td>BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。等价于&gt;= xxx AND &lt;= xxx。表示属性值在两个数字之间。</td><td><code>a IS NOT NULL AND (a BETWEEN 10 AND 100)</code>：属性a存在且属性a的值大于等于10且小于等于100。</td></tr><tr><td>NOT BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动会报错。等价于&lt; xxx OR &gt; xxx，表示属性值在两个值的区间之外。</td><td><code>a IS NOT NULL AND (a NOT BETWEEN 10 AND 100)</code>：属性a存在且属性a的值小于10或大于100。</td></tr><tr><td>IN (xxx, xxx)</td><td>表示属性的值在某个集合内。集合的元素只能是字符串。</td><td><code>a IS NOT NULL AND (a IN ('abc', 'def'))</code>：属性a存在且属性a的值为abc或def。</td></tr><tr><td><em>=</em> &lt;&gt;</td><td>等于和不等于。可用于比较数字和字符串。</td><td><code>a IS NOT NULL AND (a = 'abc' OR a&lt;&gt;'def')</code>：属性a存在且属性a的值为abc或a的值不为def。</td></tr><tr><td><em>AND</em> OR</td><td>逻辑与、逻辑或。可用于组合任意简单的逻辑判断，需要将每个逻辑判断内容放入括号内。</td><td><code>a IS NOT NULL AND (a &gt; 100) OR (b IS NULL)</code>：属性a存在且属性a的值大于100或属性b不存在。</td></tr></tbody></table><p>由于SQL属性过滤是生产者定义消息属性，消费者设置SQL过滤条件，因此过滤条件的计算结果具有不确定性，服务端的处理方式如下：</p><ul><li>异常情况处理：如果过滤条件的表达式计算抛异常，消息默认被过滤，不会被投递给消费者。例如比较数字和非数字类型的值。</li><li>空值情况处理：如果过滤条件的表达式计算值为null或不是布尔类型（true和false），则消息默认被过滤，不会被投递给消费者。例如发送消息时未定义某个属性，在订阅时过滤条件中直接使用该属性，则过滤条件的表达式计算结果为null。</li><li>数值类型不符处理：如果消息自定义属性为浮点型，但过滤条件中使用整数进行判断，则消息默认被过滤，不会被投递给消费者。</li></ul><h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><ul><li><p>发送消息，同时设置消息Tag标签和自定义属性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span><span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">"messageKey"</span><span class="token punctuation">)</span><span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span><span class="token comment">//该示例表示消息的Tag设置为"messageTag"。</span><span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">"messageTag"</span><span class="token punctuation">)</span><span class="token comment">//消息也可以设置自定义的分类属性，例如环境标签、地域、逻辑分支。</span><span class="token comment">//该示例表示为消息自定义一个属性，该属性为地域，属性值为杭州。</span><span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">"Region"</span><span class="token punctuation">,</span> <span class="token string">"Hangzhou"</span><span class="token punctuation">)</span><span class="token comment">//消息体。</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"messageBody"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>订阅消息，根据单个自定义属性匹配消息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">;</span><span class="token comment">//只订阅地域属性为杭州的消息。</span><span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">"Region IS NOT NULL AND Region='Hangzhou'"</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">SQL92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>订阅消息，根据多个自定义属性匹配消息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">;</span><span class="token comment">//只订阅地域属性为杭州且价格属性大于30的消息。</span><span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">"Region IS NOT NULL AND price IS NOT NULL AND Region = 'Hangzhou' AND price &gt; 30"</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">SQL92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>订阅消息，匹配Topic中所有消息，不过滤</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">;</span><span class="token comment">//订阅所有消息。</span><span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">SQL92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>simpleConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="消费者负载均衡"><a href="#消费者负载均衡" class="headerlink" title="消费者负载均衡"></a>消费者负载均衡</h2><p>了解消费者负载均衡策略，可以帮助您解决以下问题：</p><ul><li>消息消费处理的容灾策略：您可以根据消费者负载均衡策略，明确当局部节点出现故障时，消息如何进行消费重试和容灾切换。</li><li>消息消费的顺序性机制：通过消费者负载均衡策略，您可以进一步了解消息消费时，如何保证同一消息组内消息的先后顺序。</li><li>消息分配的水平拆分策略：了解消费者负载均衡策略，您可以明确消息消费压力如何被分配到不同节点，有针对性地进行流量迁移和水平扩缩容。</li></ul><h3 id="广播消费和共享消费"><a href="#广播消费和共享消费" class="headerlink" title="广播消费和共享消费"></a>广播消费和共享消费</h3><img src="/2023/03/23/rocketmq/consumemode-74d53c59b3266f1f633b1392f5a0f279.png" class="" title="消费方式"><ul><li><p><strong>消费组间广播消费</strong> ：如上图所示，每个消费者分组只初始化唯一一个消费者，每个消费者可消费到消费者分组内所有的消息，各消费者分组都订阅相同的消息，以此实现单客户端级别的广播一对多推送效果。</p><p>该方式一般可用于网关推送、配置推送等场景。</p></li><li><p><strong>消费组内共享消费</strong> ：如上图所示，每个消费者分组下初始化了多个消费者，这些消费者共同分担消费者分组内的所有消息，实现消费者分组内流量的水平拆分和均衡负载。</p><p>该方式一般可用于微服务解耦场景。</p></li></ul><h3 id="什么是消费者负载均衡"><a href="#什么是消费者负载均衡" class="headerlink" title="什么是消费者负载均衡"></a>什么是消费者负载均衡</h3><p>如上文所述，消费组间广播消费场景下，每个消费者分组内只有一个消费者，因此不涉及消费者的负载均衡。</p><p>消费组内共享消费场景下，消费者分组内多个消费者共同分担消息，消息按照哪种逻辑分配给哪个消费者，就是由消费者负载均衡策略所决定的。</p><p>根据消费者类型的不同，消费者负载均衡策略分为以下两种模式：</p><ul><li><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/08consumerloadbalance#section-x2b-2cu-gpf">消息粒度负载均衡</a>：PushConsumer和SimpleConsumer默认负载策略</li><li><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/08consumerloadbalance#section-n9m-6xy-y77">队列粒度负载均衡</a>：PullConsumer默认负载策略</li></ul><h3 id="消息粒度负载均衡"><a href="#消息粒度负载均衡" class="headerlink" title="消息粒度负载均衡"></a>消息粒度负载均衡</h3><h4 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h4><p>对于PushConsumer和SimpleConsumer类型的消费者，默认且仅使用消息粒度负载均衡策略。</p><h4 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h4><p>消息粒度负载均衡策略中，同一消费者分组内的多个消费者将按照消息粒度平均分摊主题中的所有消息，即同一个队列中的消息，可被平均分配给多个消费者共同消费。</p><img src="/2023/03/23/rocketmq/clustermode-dfd781d08bc0c69111841bda537aa302.png" class="" title="消息粒度负载"><p>如上图所示，消费者分组Group A中有三个消费者A1、A2和A3，这三个消费者将共同消费主题中同一队列Queue1中的多条消息。 <strong>注意</strong> 消息粒度负载均衡策略保证同一个队列的消息可以被多个消费者共同处理，但是该策略使用的消息分配算法结果是随机的，并不能指定消息被哪一个特定的消费者处理。</p><p>消息粒度的负载均衡机制，是基于内部的单条消息确认语义实现的。消费者获取某条消息后，服务端会将该消息加锁，保证这条消息对其他消费者不可见，直到该消息消费成功或消费超时。因此，即使多个消费者同时消费同一队列的消息，服务端也可保证消息不会被多个消费者重复消费。</p><p><strong>顺序消息负载机制</strong></p><p>在顺序消息中，消息的顺序性指的是同一消息组内的多个消息之间的先后顺序。因此，顺序消息场景下，消息粒度负载均衡策略还需要保证同一消息组内的消息，按照服务端存储的先后顺序进行消费。不同消费者处理同一个消息组内的消息时，会严格按照先后顺序锁定消息状态，确保同一消息组的消息串行消费。</p><img src="/2023/03/23/rocketmq/fifoinclustermode-60b2f917ab49333f93029cee178b13f0.png" class="" title="顺序消息负载策略"><p>如上图所述，队列Queue1中有4条顺序消息，这4条消息属于同一消息组G1，存储顺序由M1到M4。在消费过程中，前面的消息M1、M2被消费者Consumer A1处理时，只要消费状态没有提交，消费者A2是无法并行消费后续的M3、M4消息的，必须等前面的消息提交消费状态后才能消费后面的消息。</p><p><strong>策略特点</strong></p><p>相对于队列粒度负载均衡策略，消息粒度负载均衡策略有以下特点：</p><ul><li>消费分摊更均衡传统队列级的负载均衡策略中，如果队列数量和消费者数量不均衡，则可能会出现部分消费者空闲，或部分消费者处理过多消息的情况。消息粒度负载均衡策略无需关注消费者和队列的相对数量，能够更均匀地分摊消息。</li><li>对非对等消费者更友好对于线上生产环境，由于网络机房分区延迟、消费者物理资源规格不一致等原因，消费者的处理能力可能会不一致，如果按照队列分配消息，则可能出现部分消费者消息堆积、部分消费者空闲的情况。消息粒度负载均衡策略按需分配，消费者处理任务更均衡。</li><li>队列分配运维更方便传统基于绑定队列的负载均衡策略，必须保证队列数量大于等于消费者数量，以免产生部分消费者获取不到队列出现空转的情况，而消息粒度负载均衡策略则无需关注队列数。</li></ul><p><strong>使用示例</strong></p><p>消息粒度负载均衡策略不需要额外设置，对于PushConsumer和SimpleConsumer消费者类型默认启用。</p><h3 id="队列粒度负载均衡"><a href="#队列粒度负载均衡" class="headerlink" title="队列粒度负载均衡"></a>队列粒度负载均衡</h3><h4 id="策略原理"><a href="#策略原理" class="headerlink" title="策略原理"></a>策略原理</h4><img src="/2023/03/23/rocketmq/clusterqueuemode-ce4f88dc594c1237ba95db2fa9146b8c.png" class="" title="队列级负载均衡原理"><p>如上图所示，主题中的三个队列Queue1、Queue2、Queue3被分配给消费者分组中的两个消费者，每个队列只能分配给一个消费者消费，该示例中由于队列数大于消费者数，因此，消费者A2被分配了两个队列。若队列数小于消费者数量，可能会出现部分消费者无绑定队列的情况。</p><p>队列粒度的负载均衡，基于队列数量、消费者数量等运行数据进行统一的算法分配，将每个队列绑定到特定的消费者，然后每个消费者按照取消息&gt;提交消费位点&gt;持久化消费位点的消费语义处理消息，取消息过程不提交消费状态，因此，为了避免消息被多个消费者重复消费，每个队列仅支持被一个消费者消费。</p><h2 id="消费进度管理"><a href="#消费进度管理" class="headerlink" title="消费进度管理"></a>消费进度管理</h2><p>Apache RocketMQ 的生产者和消费者在进行消息收发时，必然会涉及以下场景，消息先生产后订阅或先订阅后生产。这两种场景下，消费者客户端启动后从哪里开始消费？如何标记已消费的消息？这些都是由 Apache RocketMQ 的消费进度管理机制来定义的。</p><p>通过了解 Apache RocketMQ 的消费进度管理机制，可以帮助您解答以下问题：</p><ul><li>消费者启动后从哪里开始消费消息？</li><li>消费者每次消费成功后如何标记消息状态，确保下次不会再重复处理该消息？</li><li>某消息被指定消费者消费过一次后，如果业务出现异常需要做故障恢复，该消息能否被重新消费？</li></ul><h3 id="消息位点"><a href="#消息位点" class="headerlink" title="消息位点"></a>消息位点</h3><p>消息是按到达服务端的先后顺序存储在指定主题的多个队列中，每条消息在队列中都有一个唯一的Long类型坐标，这个坐标被定义为消息位点。</p><p>任意一个消息队列在逻辑上都是无限存储，即消息位点会从0到Long.MAX无限增加。通过主题、队列和位点就可以定位任意一条消息的位置，具体关系如下图所示：</p><img src="/2023/03/23/rocketmq/consumerprogress-da5f38e59a7fcb4ff40325b0f7fbf8a3.png" class="" title="消息位点"><p>Apache RocketMQ 定义队列中最早一条消息的位点为最小消息位点（MinOffset）；最新一条消息的位点为最大消息位点（MaxOffset）。虽然消息队列逻辑上是无限存储，但由于服务端物理节点的存储空间有限， Apache RocketMQ 会滚动删除队列中存储最早的消息。因此，消息的最小消费位点和最大消费位点会一直递增变化。</p><img src="/2023/03/23/rocketmq/updateprogress-02d1a9de72aa4f72c3b1e1c6e03d2407.png" class="" title="消费位点更新"><h3 id="消费位点"><a href="#消费位点" class="headerlink" title="消费位点"></a>消费位点</h3><p>Apache RocketMQ 领域模型为发布订阅模式，每个主题的队列都可以被多个消费者分组订阅。若某条消息被某个消费者消费后直接被删除，则其他订阅了该主题的消费者将无法消费该消息。</p><p>因此，Apache RocketMQ 通过消费位点管理消息的消费进度。每条消息被某个消费者消费完成后不会立即在队列中删除，Apache RocketMQ 会基于每个消费者分组维护一份消费记录，该记录指定消费者分组消费某一个队列时，消费过的最新一条消息的位点，即消费位点。</p><p>当消费者客户端离线，又再次重新上线时，会严格按照服务端保存的消费进度继续处理消息。如果服务端保存的历史位点信息已过期被删除，此时消费位点向前移动至服务端存储的最小位点。</p><img src="/2023/03/23/rocketmq/consumerprogress1-07d9f77dd7e62f2250330ed36f36fe3c.png" class="" title="消费进度"><h3 id="重置消费位点"><a href="#重置消费位点" class="headerlink" title="重置消费位点"></a>重置消费位点</h3><p>若消费者分组的初始消费位点或当前消费位点不符合您的业务预期，您可以通过重置消费位点调整您的消费进度。</p><p><strong>适用场景</strong></p><ul><li>初始消费位点不符合需求：因初始消费位点为当前队列的最大消息位点，即客户端会直接从最新消息开始消费。若业务上线时需要消费部分历史消息，您可以通过重置消费位点功能消费到指定时刻前的消息。</li><li>消费堆积快速清理：当下游消费系统性能不足或消费速度小于生产速度时，会产生大量堆积消息。若这部分堆积消息可以丢弃，您可以通过重置消费位点快速将消费位点更新到指定位置，绕过这部分堆积的消息，减少下游处理压力。</li><li>业务回溯，纠正处理：由于业务消费逻辑出现异常，消息被错误处理。若您希望重新消费这些已被处理的消息，可以通过重置消费位点快速将消费位点更新到历史指定位置，实现消费回溯。</li></ul><p><strong>重置功能</strong></p><p>Apache RocketMQ 的重置消费位点提供以下能力：</p><ul><li>重置到队列中的指定位点。</li><li>重置到某一时刻对应的消费位点，匹配位点时，服务端会根据自动匹配到该时刻最接近的消费位点。</li></ul><p><strong>使用限制</strong></p><ul><li>重置消费位点后消费者将直接从重置后的位点开始消费，对于回溯重置类场景，重置后的历史消息大多属于存储冷数据，可能会造成系统压力上升，一般称为冷读现象。因此，需要谨慎评估重置消费位点后的影响。建议严格控制重置消费位点接口的调用权限，避免无意义、高频次的消费位点重置。</li><li>Apache RocketMQ 重置消费位点功能只能重置对消费者可见的消息，不能重置定时中、重试等待中的消息。</li></ul><h2 id="消费重试"><a href="#消费重试" class="headerlink" title="消费重试"></a>消费重试</h2><p>推荐使用消息重试场景如下：</p><ul><li>业务处理失败，且失败原因跟当前的消息内容相关，比如该消息对应的事务状态还未获取到，预期一段时间后可执行成功。</li><li>消费失败的原因不会导致连续性，即当前消息消费失败是一个小概率事件，不是常态化的失败，后面的消息大概率会消费成功。此时可以对当前消息进行重试，避免进程阻塞。</li></ul><p>典型错误使用场景如下：</p><ul><li>消费处理逻辑中使用消费失败来做条件判断的结果分流，是不合理的，因为处理逻辑已经预见了一定会大量出现该判断分支。</li><li>消费处理中使用消费失败来做处理速率限流，是不合理的。限流的目的是将超出流量的消息暂时堆积在队列中达到削峰的作用，而不是让消息进入重试链路。</li></ul><h3 id="消息重试策略"><a href="#消息重试策略" class="headerlink" title="消息重试策略"></a>消息重试策略</h3><p>消费重试指的是，消费者在消费某条消息失败后，Apache RocketMQ 服务端会根据重试策略重新消费该消息，超过一次定数后若还未消费成功，则该消息将不再继续重试，直接被发送到死信队列中。</p><p><strong>消息重试的触发条件</strong></p><ul><li>消费失败，包括消费者返回消息失败状态标识或抛出非预期异常。</li><li>消息处理超时，包括在PushConsumer中排队超时。</li></ul><p><strong>消息重试策略主要行为</strong></p><ul><li>重试过程状态机：控制消息在重试流程中的状态和变化逻辑。</li><li>重试间隔：上一次消费失败或超时后，下次重新尝试消费的间隔时间。</li><li>最大重试次数：消息可被重试消费的最大次数。</li></ul><h3 id="PushConsumer消息重试策略"><a href="#PushConsumer消息重试策略" class="headerlink" title="PushConsumer消息重试策略"></a>PushConsumer消息重试策略</h3><p>PushConsumer消费消息时，消息的几个主要状态如下：</p><img src="/2023/03/23/rocketmq/retrymachinestatus-37ddbd0a20b8736e34bb88f565945d16.png" class="" title="Push消费状态机"><ul><li>Ready：已就绪状态。消息在Apache RocketMQ服务端已就绪，可以被消费者消费。</li><li>Inflight：处理中状态。消息被消费者客户端获取，处于消费中还未返回消费结果的状态。</li><li>WaitingRetry：待重试状态，PushConsumer独有的状态。当消费者消息处理失败或消费超时，会触发消费重试逻辑判断。如果当前重试次数未达到最大次数，则该消息变为待重试状态，经过重试间隔后，消息将重新变为已就绪状态可被重新消费。多次重试之间，可通过重试间隔进行延长，防止无效高频的失败。</li><li>Commit：提交状态。消费成功的状态，消费者返回成功响应即可结束消息的状态机。</li><li>DLQ：死信状态。消费逻辑的最终兜底机制，若消息一直处理失败并不断进行重试，直到超过最大重试次数还未成功，此时消息不会再重试，会被投递至死信队列。您可以通过消费死信队列的消息进行业务恢复。</li></ul><p><strong>最大重试次数</strong></p><p>PushConsumer的最大重试次数由消费者分组创建时的元数据控制</p><p>例如，最大重试次数为3次，则该消息最多可被投递4次，1次为原始消息，3次为重试投递次数。</p><p><strong>重试间隔时间</strong></p><ul><li><p>无序消息（非顺序消息）：重试间隔为阶梯时间，具体时间如下：</p><table><thead><tr><th>第几次重试</th><th>与上次重试的间隔时间</th><th>第几次重试</th><th>与上次重试的间隔时间</th></tr></thead><tbody><tr><td>1</td><td>10秒</td><td>9</td><td>7分钟</td></tr><tr><td>2</td><td>30秒</td><td>10</td><td>8分钟</td></tr><tr><td>3</td><td>1分钟</td><td>11</td><td>9分钟</td></tr><tr><td>4</td><td>2分钟</td><td>12</td><td>10分钟</td></tr><tr><td>5</td><td>3分钟</td><td>13</td><td>20分钟</td></tr><tr><td>6</td><td>4分钟</td><td>14</td><td>30分钟</td></tr><tr><td>7</td><td>5分钟</td><td>15</td><td>1小时</td></tr><tr><td>8</td><td>6分钟</td><td>16</td><td>2小时</td></tr></tbody></table></li></ul><p>信息</p><p>若重试次数超过16次，后面每次重试间隔都为2小时。</p><ul><li>顺序消息：重试间隔为固定时间</li></ul><h3 id="SimpleConsumer重试机制策略"><a href="#SimpleConsumer重试机制策略" class="headerlink" title="SimpleConsumer重试机制策略"></a>SimpleConsumer重试机制策略</h3><p>SimpleConsumer消费消息时，消息的几个主要状态如下：</p><img src="/2023/03/23/rocketmq/simplemachinestatus-1844bd0115b315e32661cf20b1732db0.png" class="" title="SimpleConsumer状态机"><ul><li>Ready：已就绪状态。消息在Apache RocketMQ服务端已就绪，可以被消费者消费。</li><li>Inflight：处理中状态。消息被消费者客户端获取，处于消费中还未返回消费结果的状态。</li><li>Commit：提交状态。消费成功的状态，消费者返回成功响应即可结束消息的状态机。</li><li>DLQ：死信状态。消费逻辑的最终兜底机制，若消息一直处理失败并不断进行重试，直到超过最大重试次数还未成功，此时消息不会再重试，会被投递至死信队列。您可以通过消费死信队列的消息进行业务恢复。</li></ul><p>和PushConsumer消费重试策略不同的是，SimpleConsumer消费者的重试间隔是预分配的，每次获取消息消费者会在调用API时设置一个不可见时间参数 InvisibleDuration，即消息的最大处理时长。若消息消费失败触发重试，不需要设置下一次重试的时间间隔，直接复用不可见时间参数的取值。</p><p>由于不可见时间为预分配的，可能和实际业务中的消息处理时间差别较大，您可以通过API接口修改不可见时间。</p><h2 id="消息存储和清理机制"><a href="#消息存储和清理机制" class="headerlink" title="消息存储和清理机制"></a>消息存储和清理机制</h2><p>了解消息存储和过期清理机制，可以从以下方面帮助您更好的进行运维管理：</p><ul><li>提供消息存储时间SLA，为业务提供安全冗余空间：消息存储时间的承诺本质上代表业务侧可以自由获取消息的时间范围。对于消费时间长、消息堆积、故障恢复等场景非常关键。</li><li>评估和控制存储成本：Apache RocketMQ 消息一般存储于磁盘介质上，您可以通过存储机制评估消息存储空间，提前预留存储资源。</li></ul><h3 id="消息存储机制"><a href="#消息存储机制" class="headerlink" title="消息存储机制"></a>消息存储机制</h3><p>Apache RocketMQ 使用存储时长作为消息存储的依据，即每个节点对外承诺消息的存储时长。在存储时长范围内的消息都会被保留，无论消息是否被消费；超过时长限制的消息则会被清理掉。</p><p>消息存储机制主要定义以下关键问题：</p><ul><li>消息存储管理粒度：Apache RocketMQ 按存储节点管理消息的存储时长，并不是按照主题或队列粒度来管理。</li><li>消息存储判断依据：消息存储按照存储时间作为判断依据，相对于消息数量、消息大小等条件，使用存储时间作为判断依据，更利于业务方对消息数据的价值进行评估。</li><li>消息存储和是否消费状态无关：Apache RocketMQ 的消息存储是按照消息的生产时间计算，和消息是否被消费无关。按照统一的计算策略可以有效地简化存储机制。</li></ul><h3 id="消息过期清理机制"><a href="#消息过期清理机制" class="headerlink" title="消息过期清理机制"></a>消息过期清理机制</h3><p>在 Apache RocketMQ中，消息保存时长并不能完整控制消息的实际保存时间，因为消息存储仍然使用本地磁盘，本地磁盘空间不足时，为保证服务稳定性消息仍然会被强制清理，导致消息的实际保存时长小于设置的保存时长。</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MQ </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Hystrix</title>
      <link href="/2023/03/04/springcloud-hystrix/"/>
      <url>/2023/03/04/springcloud-hystrix/</url>
      
        <content type="html"><![CDATA[<h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>在微服务架构中，一个应用往往由多个服务组成，这些服务之间相互依赖，依赖关系错综复杂。</p><p>例如一个微服务系统中存在 A、B、C、D、E、F 等多个服务，它们的依赖关系如下图。</p><img src="/2023/03/04/springcloud-hystrix/101623H11-0.png" class="" title="img"><p>通常情况下，一个用户请求往往需要多个服务配合才能完成。如图 1 所示，在所有服务都处于可用状态时，请求 1 需要调用 A、D、E、F 四个服务才能完成，请求 2 需要调用 B、E、D 三个服务才能完成，请求 3 需要调用服务 C、F、E、D 四个服务才能完成。</p><p>当服务 E 发生故障或网络延迟时，会出现以下情况：</p><ol><li>即使其他所有服务都可用，由于服务 E 的不可用，那么用户请求 1、2、3 都会处于阻塞状态，等待服务 E 的响应。在高并发的场景下，会导致整个服务器的线程资源在短时间内迅速消耗殆尽。</li><li>所有依赖于服务 E 的其他服务，例如服务 B、D 以及 F 也都会处于线程阻塞状态，等待服务 E 的响应，导致这些服务的不可用。</li><li>所有依赖服务B、D 和 F 的服务，例如服务 A 和服务 C 也会处于线程阻塞状态，以等待服务 D 和服务 F 的响应，导致服务 A 和服务 C 也不可用。</li></ol><p>从以上过程可以看出，当微服务系统的一个服务出现故障时，故障会沿着服务的调用链路在系统中疯狂蔓延，最终导致整个微服务系统的瘫痪，这就是“雪崩效应”。为了防止此类事件的发生，微服务架构引入了“熔断器”的一系列服务容错和保护机制。</p><h3 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h3><p>微服务架构中的熔断器能够在某个服务发生故障后，向服务调用方返回一个符合预期的、可处理的降级响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常。这样就保证了服务调用方的线程不会被长时间、不必要地占用，避免故障在微服务系统中的蔓延，防止系统雪崩效应的发生。</p><h3 id="Hystrix介绍"><a href="#Hystrix介绍" class="headerlink" title="Hystrix介绍"></a>Hystrix介绍</h3><p>Spring Cloud Hystrix 是一款优秀的服务容错与保护组件，也是 Spring Cloud 中最重要的组件之一。</p><p>Spring Cloud Hystrix 是基于 Netflix 公司的开源组件 Hystrix 实现的，它提供了熔断器功能，能够有效地阻止分布式微服务系统中出现联动故障，以提高微服务系统的弹性。Spring Cloud Hystrix 具有服务降级、服务熔断、线程隔离、请求缓存、请求合并以及实时故障监控等强大功能。</p><p>在微服务系统中，Hystrix 能够帮助我们实现以下目标：</p><ul><li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li><li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li><li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个兜底方法，当请求失败后即调用该方法。</li><li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li><li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li></ul><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>Hystrix 提供了服务降级功能，能够保证当前服务不受其他服务故障的影响，提高服务的健壮性。</p><p>服务降级的使用场景有以下 2 种：</p><ul><li>在服务器压力剧增时，根据实际业务情况及流量，对一些不重要、不紧急的服务进行有策略地不处理或简单处理，从而释放服务器资源以保证核心服务正常运作。</li><li>当某些服务不可用时，为了避免长时间等待造成服务卡顿或雪崩效应，而主动执行备用的降级逻辑立刻返回一个友好的提示，以保障主体业务不受影响。</li></ul><p>我们可以通过重写 HystrixCommand 的 getFallBack() 方法或 HystrixObservableCommand 的 resumeWithFallback() 方法，使服务支持服务降级。</p><p>Hystrix 服务降级 FallBack 既可以放在服务端进行，也可以放在客户端进行。</p><p>Hystrix 会在以下场景下进行服务降级处理：</p><ul><li>程序运行异常</li><li>服务超时</li><li>熔断器处于打开状态</li><li>线程池资源耗尽</li></ul><h4 id="服务端服务降级"><a href="#服务端服务降级" class="headerlink" title="服务端服务降级"></a>服务端服务降级</h4><p>服务提供者项目，配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> microServiceCloudProviderDeptHystrix  <span class="token comment">#微服务名称，对外暴漏的微服务名称，十分重要</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token comment">########################################### Spring cloud 自定义服务名称和 ip 地址###############################################</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#将客户端注册到 eureka 服务列表内</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#defaultZone: http://eureka7001:7001/eureka  #这个地址是 7001注册中心在 application.yml 中暴露出来额注册地址 （单机版）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/  <span class="token comment">#将服务注册到 Eureka 集群</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span><span class="token number">8004</span> <span class="token comment">#自定义服务名称信息</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#显示访问路径的 ip 地址</span><span class="token comment">#####################spring cloud 使用 Spring Boot actuator 监控完善信息###########################################</span><span class="token comment"># Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 heath 节点，本段配置（*）就是为了开启所有的节点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>   <span class="token comment"># * 在yaml 文件属于关键字，所以需要加引号</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept<span class="token punctuation">-</span>hystrix  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> c.biancheng.net  <span class="token key atrule">build.aetifactId</span><span class="token punctuation">:</span> @project.artifactId@  <span class="token key atrule">build.version</span><span class="token punctuation">:</span> @project.version@</code></pre><p>服务提供者接口实现代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"deptService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Ok</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"线程池："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  deptInfo_Ok,id:   "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//一旦该方法失败并抛出了异常信息后，会自动调用  @HystrixCommand 注解标注的 fallbackMethod 指定的方法</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"dept_TimeoutHandler"</span><span class="token punctuation">,</span>            commandProperties <span class="token operator">=</span>                    <span class="token comment">//规定 5 秒钟以内就不报错，正常运行，超过 5 秒就报错，调用指定的方法</span>                    <span class="token punctuation">{</span><span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"5000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> outTime <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>outTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"线程池："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  deptInfo_Timeout,id:   "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"  耗时: "</span> <span class="token operator">+</span> outTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当服务出现故障后，调用该方法给出友好提示</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dept_TimeoutHandler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token string">"C语言中文网提醒您，系统繁忙请稍后再试！"</span><span class="token operator">+</span><span class="token string">"线程池："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  deptInfo_Timeout,id:   "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务提供者主启动类激活熔断器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">//开启 Eureka 客户端功能</span><span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment">//激活熔断器功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudProviderDeptHystrix8004Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudProviderDeptHystrix8004Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="客户端服务降级"><a href="#客户端服务降级" class="headerlink" title="客户端服务降级"></a>客户端服务降级</h4><p>通常情况下，我们都会在客户端进行服务降级，当客户端调用的服务端的服务不可用时，客户端直接进行服务降级处理，避免其线程被长时间、不必要地占用。</p><p>配置文件开启客户端的Hystrix功能</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启客户端 hystrix</span></code></pre><p>客户端Controller类中设置服务降级</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixController_Consumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DeptHystrixService</span> deptHystrixService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/dept/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deptHystrixService<span class="token punctuation">.</span><span class="token function">deptInfo_Ok</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//在客户端进行降级</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/dept/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"dept_TimeoutHandler"</span><span class="token punctuation">)</span> <span class="token comment">//为该请求指定专属的回退方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> deptHystrixService<span class="token punctuation">.</span><span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// deptInfo_Timeout方法的 专用 fallback 方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dept_TimeoutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deptInfo_Timeout 出错，服务已被降级！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"C语言中文网提醒您：服务端系统繁忙，请稍后再试！（客户端 deptInfo_Timeout 专属的回退方法触发）"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件设置请求超时时间</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">######################### Ribbon 客户端超时控制 ###################################</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端两端连接所用的时间</span>  <span class="token key atrule">ConnectionTimeout</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment">#建立连接后，服务器读取到可用资源的时间</span><span class="token comment">######################配置请求超时时间##########################</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">7000</span><span class="token comment">####################配置具体方法超时时间 为 3 秒########################</span>    DeptHystrixService<span class="token comment">#deptInfo_Timeout(Integer):</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span></code></pre><p>在配置文件中设计请求的超时时间时，需要注意以下 2 点： </p><p>1）Hystrix 可以来为所有请求（方法）设置超时时间（单位为毫秒），若请求超时则触发全局的回退方法进行处理。</p><pre class="language-none"><code class="language-none">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=mmm</code></pre><p>2）Hystrix 还可以为某个特定的服务请求（方法）设置超时时间，格式如下：</p><pre class="language-none"><code class="language-none">hystrix.command.xxx#yyy(zzz).execution.isolation.thread.timeoutInMilliseconds=mmm</code></pre><p>格式说明如下：</p><ul><li>xxx：为包含该服务方法的类的名称（通常为服务绑定接口的名称），例如 DeptHystrixService 接口。</li><li>yyy：服务方法名，例如 deptInfo_Timeout() 方法。</li><li>zzz：方法内的参数类型，例如 Integer、String 等等</li><li>mmm：要设置的超时时间，单位为毫秒（1 秒 =1000 毫秒)</li></ul><p>主启动类开启客户端Hystrix功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span> <span class="token comment">//开启 OpenFeign 功能</span><span class="token annotation punctuation">@EnableHystrix</span> <span class="token comment">//启用 Hystrix</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudConsumerDeptFeignApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudConsumerDeptFeignApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="全局降级方法"><a href="#全局降级方法" class="headerlink" title="全局降级方法"></a>全局降级方法</h4><p>在消费端的Controller类名上标注@DefaultProperties 注解，并通过其 defaultFallback 属性指定一个全局的降级方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"dept_Global_FallbackMethod"</span><span class="token punctuation">)</span> <span class="token comment">//全局的服务降级方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixController_Consumer</span> <span class="token punctuation">{</span>……<span class="token punctuation">}</span></code></pre><p>创建一个名为 dept_Global_FallbackMethod 的全局回方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 全局的 fallback 方法， * 回退方法必须和 hystrix 的执行方法在相同类中 * @DefaultProperties(defaultFallback = "dept_Global_FallbackMethod") 类上注解，请求方法上使用 @HystrixCommand 注解 */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dept_Global_FallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"C语言中文网提醒您，运行出错或服务端系统繁忙，请稍后再试！（客户端全局回退方法触发,）"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在所有的业务方法上都标注 @HystrixCommand 注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在客户端进行降级</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/dept/hystrix/timeout/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> deptHystrixService<span class="token punctuation">.</span><span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：全局降级方法的优先级较低，只有业务方法没有指定其降级方法时，服务降级时才会触发全局回退方法。若业务方法指定它自己的回退方法，那么在服务降级时，就只会直接触发它自己的回退方法，而非全局回退方法。</p><h4 id="解耦降级方法"><a href="#解耦降级方法" class="headerlink" title="解耦降级方法"></a>解耦降级方法</h4><p>新增服务绑定接口的实现类，统一为接口中的服务提供服务降级处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Hystrix 服务降级* 解耦回退逻辑*/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptHystrixFallBackService</span> <span class="token keyword">implements</span> <span class="token class-name">DeptHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Ok</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"--------------------C语言中文网提醒您，系统繁忙，请稍后重试！（解耦回退方法触发）-----------------------"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"--------------------C语言中文网提醒您，系统繁忙，请稍后重试！（解耦回退方法触发）-----------------------"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在服务绑定接口的@FeignClient 注解中添加 fallback 属性，属性值为 DeptHystrixFallBackService.class</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"MICROSERVICECLOUDPROVIDERDEPTHYSTRIX"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">DeptHystrixFallBackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>熔断机制是为了应对雪崩效应而出现的一种微服务链路保护机制。</p><p>当微服务系统中的某个微服务不可用或响应时间太长时，为了保护系统的整体可用性，熔断器会暂时切断请求对该服务的调用，并快速返回一个友好的错误响应。这种熔断状态不是永久的，在经历了一定的时间后，熔断器会再次检测该微服务是否恢复正常，若服务恢复正常则恢复其调用链路。</p><h4 id="熔断状态"><a href="#熔断状态" class="headerlink" title="熔断状态"></a>熔断状态</h4><p>在熔断机制中涉及了三种熔断状态：</p><ul><li>熔断关闭状态（Closed）：当服务访问正常时，熔断器处于关闭状态，服务调用方可以正常地对服务进行调用。</li><li>熔断开启状态（Open）：默认情况下，在固定时间内接口调用出错比率达到一个阈值（例如 50%），熔断器会进入熔断开启状态。进入熔断状态后，后续对该服务的调用都会被切断，熔断器会执行本地的降级（FallBack）方法。</li><li>半熔断状态（Half-Open）： 在熔断开启一段时间之后，熔断器会进入半熔断状态。在半熔断状态下，熔断器会尝试恢复服务调用方对服务的调用，允许部分请求调用该服务，并监控其调用成功率。如果成功率达到预期，则说明服务已恢复正常，熔断器进入关闭状态；如果成功率仍旧很低，则重新进入熔断开启状态。</li></ul><h4 id="Hystrix-实现熔断机制"><a href="#Hystrix-实现熔断机制" class="headerlink" title="Hystrix 实现熔断机制"></a>Hystrix 实现熔断机制</h4><p>在 Spring Cloud 中，熔断机制是通过 Hystrix 实现的。Hystrix 会监控微服务间调用的状况，当失败调用到一定比例时（例如 5 秒内失败 20 次），就会启动熔断机制。</p><p>Hystrix 实现服务熔断的步骤如下：</p><ol><li>当服务的调用出错率达到或超过 Hystix 规定的比率（默认为 50%）后，熔断器进入熔断开启状态。</li><li>熔断器进入熔断开启状态后，Hystrix 会启动一个休眠时间窗，在这个时间窗内，该服务的降级逻辑会临时充当业务主逻辑，而原来的业务主逻辑不可用。</li><li>当有请求再次调用该服务时，会直接调用降级逻辑快速地返回失败响应，以避免系统雪崩。</li><li>当休眠时间窗到期后，Hystrix 会进入半熔断转态，允许部分请求对服务原来的主业务逻辑进行调用，并监控其调用成功率。</li><li>如果调用成功率达到预期，则说明服务已恢复正常，Hystrix 进入熔断关闭状态，服务原来的主业务逻辑恢复；否则 Hystrix 重新进入熔断开启状态，休眠时间窗口重新计时，继续重复第 2 到第 5 步。</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>在服务提供者方法实现中定义熔断规则</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Hystrix 熔断案例</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"deptCircuitBreaker_fallback"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment">//以下参数在 HystrixCommandProperties 类中有默认配置</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//是否开启熔断器</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.timeInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//统计时间窗</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//统计时间窗内请求次数</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//休眠时间窗口期</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//在统计时间窗口期以内，请求失败率达到 60% 时进入熔断状态</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptCircuitBreaker</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//当传入的 id 为负数时，抛出异常，调用降级方法</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"c语言中文网提醒您，id 不能是负数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span> serialNum <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"调用成功，流水号为："</span> <span class="token operator">+</span> serialNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//deptCircuitBreaker 的降级方法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"c语言中文网提醒您，id 不能是负数,请稍后重试!\t id:"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Hystrix故障监控"><a href="#Hystrix故障监控" class="headerlink" title="Hystrix故障监控"></a>Hystrix故障监控</h3><p>通过一个实例来搭建 Hystrix Dashboard</p><p>配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9002</span>  <span class="token comment">#端口号</span><span class="token comment">#http://eureka7001.com:9002/hystrix 熔断器监控页面</span><span class="token comment"># localhost:8004//actuator/hystrix.stream 监控地址</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">proxy-stream-allow-list</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"localhost"</span></code></pre><p>主启动类添加开启Hystrix监控</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudConsumerDeptHystrixDashboard9002Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudConsumerDeptHystrixDashboard9002Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个名为 HystrixDashboardConfig 的配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     *  Hystrix dashboard 监控界面必须配置     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/actuator/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问路径</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Gateway</title>
      <link href="/2023/02/28/springcloud-gateway/"/>
      <url>/2023/02/28/springcloud-gateway/</url>
      
        <content type="html"><![CDATA[<h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p>在微服务架构中，一个系统往往由多个微服务组成，而这些服务可能部署在不同机房、不同地区、不同域名下。这种情况下，客户端（例如浏览器、手机、软件工具等）想要直接请求这些服务，就需要知道它们具体的地址信息，例如 IP 地址、端口号等。</p><p>这种客户端直接请求服务的方式存在以下问题：</p><ul><li>当服务数量众多时，客户端需要维护大量的服务地址，这对于客户端来说，是非常繁琐复杂的。</li><li>在某些场景下可能会存在跨域请求的问题。</li><li>身份认证的难度大，每个微服务需要独立认证。</li></ul><p>我们可以通过 API 网关来解决这些问题，下面就让我们来看看什么是 API 网关。</p><h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><p>API 网关是一个搭建在客户端和微服务之间的服务，我们可以在 API 网关中处理一些非业务功能的逻辑，例如权限验证、监控、缓存、请求路由等。</p><p>API 网关就像整个微服务系统的门面一样，是系统对外的唯一入口。有了它，客户端会先将请求发送到 API 网关，然后由 API 网关根据请求的标识信息将请求转发到微服务实例。</p><img src="/2023/02/28/springcloud-gateway/101P46212-0.png" class="" title="img"><p>对于服务数量众多、复杂度较高、规模比较大的系统来说，使用 API 网关具有以下好处：</p><ul><li>客户端通过 API 网关与微服务交互时，客户端只需要知道 API 网关地址即可，而不需要维护大量的服务地址，简化了客户端的开发。</li><li>客户端直接与 API 网关通信，能够减少客户端与各个服务的交互次数。</li><li>客户端与后端的服务耦合度降低。</li><li>节省流量，提高性能，提升用户体验。</li><li>API 网关还提供了安全、流控、过滤、缓存、计费以及监控等 API 管理功能。</li></ul><p>常见的 API 网关实现方案主要有以下 5 种：</p><ul><li>Spring Cloud Gateway</li><li>Spring Cloud Netflix Zuul</li><li>Kong</li><li>Nginx+Lua</li><li>Traefik</li></ul><h3 id="Spring-Cloud-Gateway-核心概念"><a href="#Spring-Cloud-Gateway-核心概念" class="headerlink" title="Spring Cloud Gateway 核心概念"></a>Spring Cloud Gateway 核心概念</h3><p>Spring Cloud GateWay 最主要的功能就是路由转发，而在定义转发规则时主要涉及了以下三个核心概念，如下表。</p><table><thead><tr><th>核心概念</th><th>描述</th></tr></thead><tbody><tr><td>Route（路由）</td><td>网关最基本的模块。它由一个 ID、一个目标 URI、一组断言（Predicate）和一组过滤器（Filter）组成。</td></tr><tr><td>Predicate（断言）</td><td>路由转发的判断条件，我们可以通过 Predicate 对 HTTP 请求进行匹配，例如请求方式、请求路径、请求头、参数等，如果请求与断言匹配成功，则将请求转发到相应的服务。</td></tr><tr><td>Filter（过滤器）</td><td>过滤器，我们可以使用它对请求进行拦截和修改，还可以使用它对上文的响应进行再处理。</td></tr></tbody></table><blockquote><p>注意：其中 Route 和 Predicate 必须同时声明。</p></blockquote><h3 id="Spring-Cloud-Gateway-的特征"><a href="#Spring-Cloud-Gateway-的特征" class="headerlink" title="Spring Cloud Gateway 的特征"></a>Spring Cloud Gateway 的特征</h3><p>Spring Cloud Gateway 具有以下特性：</p><ul><li>基于 Spring Framework 5、Project Reactor 和 Spring Boot 2.0 构建。</li><li>能够在任意请求属性上匹配路由。</li><li>predicates（断言） 和 filters（过滤器）是特定于路由的。</li><li>集成了 Hystrix 熔断器。</li><li>集成了 Spring Cloud DiscoveryClient（服务发现客户端）。</li><li>易于编写断言和过滤器。</li><li>能够限制请求频率。</li><li>能够重写请求路径。</li></ul><h3 id="Gateway-的工作流程"><a href="#Gateway-的工作流程" class="headerlink" title="Gateway 的工作流程"></a>Gateway 的工作流程</h3><p>Spring Cloud Gateway 工作流程如下图。</p><img src="/2023/02/28/springcloud-gateway/101P45T2-1.png" class="" title="Spring Cloud Gateway 工作流程"><p>Spring Cloud Gateway 工作流程说明如下：</p><ol><li>客户端将请求发送到 Spring Cloud Gateway 上。</li><li>Spring Cloud Gateway 通过 Gateway Handler Mapping 找到与请求相匹配的路由，将其发送给 Gateway Web Handler。</li><li>Gateway Web Handler 通过指定的过滤器链（Filter Chain），将请求转发到实际的服务节点中，执行业务逻辑返回响应结果。</li><li>过滤器之间用虚线分开是因为过滤器可能会在转发请求之前（pre）或之后（post）执行业务逻辑。</li><li>过滤器（Filter）可以在请求被转发到服务端前，对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。</li><li>过滤器可以在响应返回客户端之前，对响应进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</li><li>响应原路返回给客户端。</li></ol><h3 id="Predicate-断言"><a href="#Predicate-断言" class="headerlink" title="Predicate 断言"></a>Predicate 断言</h3><p>Spring Cloud Gateway 通过 Predicate 断言来实现 Route 路由的匹配规则。简单点说，Predicate 是路由转发的判断条件，请求只有满足了 Predicate 的条件，才会被转发到指定的服务上进行处理。</p><p>使用 Predicate 断言需要注意以下 3 点：</p><ul><li>Route 路由与 Predicate 断言的对应关系为“一对多”，一个路由可以包含多个不同断言。</li><li>一个请求想要转发到指定的路由上，就必须同时匹配路由上的所有断言。</li><li>当一个请求同时满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发。</li></ul><img src="/2023/02/28/springcloud-gateway/101P42B6-2.png" class="" title="img"><p>常见的 Predicate 断言如下表（假设转发的 URI 为 <a href="http://localhost:8001）。">http://localhost:8001）。</a></p><table><thead><tr><th>断言</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>Path</td><td>- Path=/dept/list/**</td><td>当请求路径与 /dept/list/** 匹配时，该请求才能被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr><tr><td>Before</td><td>- Before=2021-10-20T11:47:34.255+08:00[Asia/Shanghai]</td><td>在 2021 年 10 月 20 日 11 时 47 分 34.255 秒之前的请求，才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr><tr><td>After</td><td>- After=2021-10-20T11:47:34.255+08:00[Asia/Shanghai]</td><td>在 2021 年 10 月 20 日 11 时 47 分 34.255 秒之后的请求，才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr><tr><td>Between</td><td>- Between=2021-10-20T15:18:33.226+08:00[Asia/Shanghai],2021-10-20T15:23:33.226+08:00[Asia/Shanghai]</td><td>在 2021 年 10 月 20 日 15 时 18 分 33.226 秒 到 2021 年 10 月 20 日 15 时 23 分 33.226 秒之间的请求，才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 服务器上。</td></tr><tr><td>Cookie</td><td>- Cookie=name,c.biancheng.net</td><td>携带 Cookie 且 Cookie 的内容为 name=c.biancheng.net 的请求，才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr><tr><td>Header</td><td>- Header=X-Request-Id,\d+</td><td>请求头上携带属性 X-Request-Id 且属性值为整数的请求，才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr><tr><td>Method</td><td>- Method=GET</td><td>只有 GET 请求才会被转发到 <a href="http://localhost:8001/">http://localhost:8001</a> 上。</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>  <span class="token comment">#端口号</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> microServiceCloudGateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span> <span class="token comment">#网关路由配置</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token comment">#将 micro-service-cloud-provider-dept-8001 提供的服务隐藏起来，不暴露给客户端，只给客户端暴露 API 网关的地址 9527</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> provider_dept_list_routh   <span class="token comment">#路由 id,没有固定规则，但唯一，建议与服务名对应</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>          <span class="token comment">#匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token comment">#以下是断言条件，必选全部符合条件</span>            <span class="token punctuation">-</span> Path=/dept/list/<span class="token important">**</span>               <span class="token comment">#断言，路径匹配 注意：Path 中 P 为大写</span>            <span class="token punctuation">-</span> Method=GET <span class="token comment">#只能时 GET 请求时，才能访问</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span><span class="token number">9527</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre><h3 id="Gateway动态路由"><a href="#Gateway动态路由" class="headerlink" title="Gateway动态路由"></a>Gateway动态路由</h3><p>默认情况下，Spring Cloud Gateway 会根据服务注册中心（例如 Eureka Server）中维护的服务列表，以服务名（spring.application.name）作为路径创建动态路由进行转发，从而实现动态路由功能。</p><p>我们可以在配置文件中，将 Route 的 uri 地址修改为以下形式。</p><pre class="language-none"><code class="language-none">lb://service-name</code></pre><p>以上配置说明如下：</p><ul><li>lb：uri 的协议，表示开启 Spring Cloud Gateway 的负载均衡功能。</li><li>service-name：服务名，Spring Cloud Gateway 会根据它获取到具体的微服务地址。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span> <span class="token comment">#端口号</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> microServiceCloudGateway  <span class="token comment">#服务注册中心注册的服务名</span>     <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span> <span class="token comment">#网关路由配置</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#默认值为 true，即默认开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token comment">#将 micro-service-cloud-provider-dept-8001 提供的服务隐藏起来，不暴露给客户端，只给客户端暴露 API 网关的地址 9527</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> provider_dept_list_routh   <span class="token comment">#路由 id,没有固定规则，但唯一，建议与服务名对应</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//MICROSERVICECLOUDPROVIDERDEPT <span class="token comment">#动态路由，使用服务名代替上面的具体带端口   http://eureka7001.com:9527/dept/list</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token comment">#以下是断言条件，必选全部符合条件</span>            <span class="token punctuation">-</span> Path=/dept/list/<span class="token important">**</span>    <span class="token comment">#断言，路径匹配 注意：Path 中 P 为大写</span>            <span class="token punctuation">-</span> Method=GET <span class="token comment">#只能时 GET 请求时，才能访问</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span><span class="token number">9527</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/</code></pre><h3 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h3><p>通常情况下，出于安全方面的考虑，服务端提供的服务往往都会有一定的校验逻辑，例如用户登陆状态校验、签名校验等。</p><p>在微服务架构中，系统由多个微服务组成，所有这些服务都需要这些校验逻辑，此时我们就可以将这些校验逻辑写到 Spring Cloud Gateway 的 Filter 过滤器中。</p><h4 id="Filter-的分类"><a href="#Filter-的分类" class="headerlink" title="Filter 的分类"></a>Filter 的分类</h4><p>Spring Cloud Gateway 提供了以下两种类型的过滤器，可以对请求和响应进行精细化控制。</p><table><thead><tr><th>过滤器类型</th><th>说明</th></tr></thead><tbody><tr><td>Pre 类型</td><td>这种过滤器在请求被转发到微服务之前可以对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等操作。</td></tr><tr><td>Post 类型</td><td>这种过滤器在微服务对请求做出响应后可以对响应进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</td></tr></tbody></table><p>按照作用范围划分，Spring Cloud gateway 的 Filter 可以分为 2 类：</p><ul><li>GatewayFilter：应用在单个路由或者一组路由上的过滤器。</li><li>GlobalFilter：应用在所有的路由上的过滤器。</li></ul><h4 id="GatewayFilter网关过滤器"><a href="#GatewayFilter网关过滤器" class="headerlink" title="GatewayFilter网关过滤器"></a>GatewayFilter网关过滤器</h4><p>GatewayFilter 是 Spring Cloud Gateway 网关中提供的一种应用在单个或一组路由上的过滤器。它可以对单个路由或者一组路由上传入的请求和传出响应进行拦截，并实现一些与业务无关的功能，比如登陆状态校验、签名校验、权限校验、日志输出、流量监控等。</p><p>GatewayFilter 在配置文件（例如 application.yml）中的写法与 Predicate 类似，格式如下。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>       <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> xxxx          <span class="token key atrule">uri</span><span class="token punctuation">:</span> xxxx          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=xxxx          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> AddRequestParameter=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span><span class="token number">1024</span> <span class="token comment">#过滤器工厂会在匹配的请求头加上一对请求头，名称为 X-Request-Id 值为 1024</span>            <span class="token punctuation">-</span> PrefixPath=/dept <span class="token comment">#在请求路径前面加上 /dept</span>            ……</code></pre><h4 id="GlobalFilter全局过滤器"><a href="#GlobalFilter全局过滤器" class="headerlink" title="GlobalFilter全局过滤器"></a>GlobalFilter全局过滤器</h4><p>GlobalFilter 是一种作用于所有的路由上的全局过滤器，通过它，我们可以实现一些统一化的业务功能，例如权限认证、IP 访问限制等。当某个请求被路由匹配时，那么所有的 GlobalFilter 会和该路由自身配置的 GatewayFilter 组合成一个过滤器链。</p><p>新建一个名为 MyGlobalFilter 全局过滤器配置类，代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入自定义的全局过滤器 MyGlobalFilter"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"参数 uname 不能为 null！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_ACCEPTABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//过滤器的顺序，0 表示第一个</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFeign</title>
      <link href="/2023/02/25/openfeign/"/>
      <url>/2023/02/25/openfeign/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>Netflix Feign 是 Netflix 公司发布的一种实现负载均衡和服务调用的开源组件。Spring Cloud 将其与 Netflix 中的其他开源服务组件（例如 Eureka、Ribbon 以及 Hystrix 等）一起整合进 Spring Cloud Netflix 模块中，整合后全称为 Spring Cloud Netflix Feign。</p><p>Feign 对 <a href="http://c.biancheng.net/springcloud/ribbon.html">Ribbon</a> 进行了集成，利用 Ribbon 维护了一份可用服务清单，并通过 Ribbon 实现了客户端的负载均衡。</p><p>Feign 是一种声明式服务调用组件，它在 RestTemplate 的基础上做了进一步的封装。通过 Feign，我们只需要声明一个接口并通过注解进行简单的配置（类似于 Dao 接口上面的 Mapper 注解一样）即可实现对 HTTP 接口的绑定。</p><p>通过 Feign，我们可以像调用本地方法一样来调用远程服务，而完全感觉不到这是在进行远程调用。</p><p>Feign 支持多种注解，例如 Feign 自带的注解以及 JAX-RS 注解等，但遗憾的是 Feign 本身并不支持 Spring MVC 注解，这无疑会给广大 Spring 用户带来不便。</p><p>2019 年 Netflix 公司宣布 Feign 组件正式进入停更维护状态，于是 Spring 官方便推出了一个名为 OpenFeign 的组件作为 Feign 的替代方案。</p><p>OpenFeign 全称 Spring Cloud OpenFeign，它是 Spring 官方推出的一种声明式服务调用与负载均衡组件，它的出现就是为了替代进入停更维护状态的 Feign。</p><p>OpenFeign 是 Spring Cloud 对 Feign 的二次封装，它具有 Feign 的所有功能，并在 Feign 的基础上增加了对 Spring MVC 注解的支持，例如 @RequestMapping、@GetMapping 和 @PostMapping 等。</p><h2 id="OpenFeign常用注解"><a href="#OpenFeign常用注解" class="headerlink" title="OpenFeign常用注解"></a>OpenFeign常用注解</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@FeignClient</td><td>该注解用于通知 OpenFeign 组件对 @RequestMapping 注解下的接口进行解析，并通过动态代理的方式产生实现类，实现负载均衡和服务调用。</td></tr><tr><td>@EnableFeignClients</td><td>该注解用于开启 OpenFeign 功能，当 Spring Cloud 应用启动时，OpenFeign 会扫描标有 @FeignClient 注解的接口，生成代理并注册到 Spring 容器中。</td></tr><tr><td>@RequestMapping</td><td>Spring MVC 注解，在 Spring MVC 中使用该注解映射请求，通过它来指定控制器（Controller）可以处理哪些 URL 请求，相当于 Servlet 中 web.xml 的配置。</td></tr><tr><td>@GetMapping</td><td>Spring MVC 注解，用来映射 GET 请求，它是一个组合注解，相当于 @RequestMapping(method = RequestMethod.GET) 。</td></tr><tr><td>@PostMapping</td><td>Spring MVC 注解，用来映射 POST 请求，它是一个组合注解，相当于 @RequestMapping(method = RequestMethod.POST) 。</td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p>配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#服务消费者可以不向服务注册中心注册服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#服务消费者客户端需要去检索服务</span></code></pre></li><li><p>Service接口</p><p>创建一个名为 DeptFeignService 的接口，并在该接口上使用 @FeignClient 注解实现对服务接口的绑定</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//添加为容器内的一个组件</span><span class="token annotation punctuation">@Component</span><span class="token comment">// 服务提供者提供的服务名称，即 application.name</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"MICROSERVICECLOUDPROVIDERDEPT"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptFeignService</span> <span class="token punctuation">{</span>    <span class="token comment">//对应服务提供者（8001、8002、8003）Controller 中定义的方法</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Dept</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在编写服务绑定接口时，需要注意以下 2 点：</p><ul><li>在 @FeignClient 注解中，value 属性的取值为：服务提供者的服务名，即服务提供者配置文件（application.yml）中 spring.application.name 的取值。</li><li>接口中定义的每个方法都与服务提供者（即 micro-service-cloud-provider-dept-8001 等）中 Controller 定义的服务方法对应。</li></ul></li><li><p>主启动类配置</p><p>主启动类上添加 @EnableFeignClients 注解开启 OpenFeign 功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span> <span class="token comment">//开启 OpenFeign 功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudConsumerDeptFeignApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudConsumerDeptFeignApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h2><p>默认超时时间1秒，修改超时时间，配置文件添加</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端两端连接所用的时间</span>  <span class="token key atrule">ConnectionTimeout</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment">#建立连接后，服务器读取到可用资源的时间</span></code></pre><h2 id="OpenFeign日志增强"><a href="#OpenFeign日志增强" class="headerlink" title="OpenFeign日志增强"></a>OpenFeign日志增强</h2><p>配置文件新增配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token comment">#feign 日志以什么样的级别监控该接口</span>    <span class="token key atrule">net.biancheng.c.service.DeptFeignService</span><span class="token punctuation">:</span> debug</code></pre><p>新增配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigBean</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * OpenFeign 日志增强     * 配置 OpenFeign 记录哪些内容     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feginLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该配置的作用是通过配置的 Logger.Level 对象告诉 OpenFeign 记录哪些日志内容。</p><p> Logger.Level 的具体级别如下：</p><ul><li>NONE：不记录任何信息。</li><li>BASIC：仅记录请求方法、URL 以及响应状态码和执行时间。</li><li>HEADERS：除了记录 BASIC 级别的信息外，还会记录请求和响应的头信息。</li><li>FULL：记录所有请求与响应的明细，包括头信息、请求体、元数据等等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-Ribbon</title>
      <link href="/2023/02/20/springcloud-ribbon/"/>
      <url>/2023/02/20/springcloud-ribbon/</url>
      
        <content type="html"><![CDATA[<h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p>Spring Cloud Ribbon 是一套基于 Netflix Ribbon 实现的客户端负载均衡和服务调用工具。</p><p>Netflix Ribbon 是 Netflix 公司发布的开源组件，其主要功能是提供客户端的负载均衡算法和服务调用。Spring Cloud 将其与 Netflix 中的其他开源服务组件（例如 Eureka、Feign 以及 Hystrix 等）一起整合进 Spring Cloud Netflix 模块中，整合后全称为 Spring Cloud Netflix Ribbon。</p><p>Ribbon 是 Spring Cloud Netflix 模块的子模块，它是 Spring Cloud 对 Netflix Ribbon 的二次封装。通过它，我们可以将面向服务的 REST 模板（RestTemplate）请求转换为客户端负载均衡的服务调用。</p><p>Ribbon 是 Spring Cloud 体系中最核心、最重要的组件之一。它虽然只是一个工具类型的框架，并不像 Eureka Server（服务注册中心）那样需要独立部署，但它几乎存在于每一个使用 Spring Cloud 构建的微服务中。</p><p>Spring Cloud 微服务之间的调用，API 网关的请求转发等内容，实际上都是通过 Spring Cloud Ribbon 来实现的，包括后续我们要介绍的 <a href="http://c.biancheng.net/springcloud/open-feign.html">OpenFeign</a> 也是基于它实现的。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>在任何一个系统中，负载均衡都是一个十分重要且不得不去实施的内容，它是系统处理高并发、缓解网络压力和服务端扩容的重要手段之一。</p><p>负载均衡（Load Balance） ，简单点说就是将用户的请求平摊分配到多个服务器上运行，以达到扩展服务器带宽、增强数据处理能力、增加吞吐量、提高网络的可用性和灵活性的目的。</p><p>常见的负载均衡方式有两种：</p><ul><li>服务端负载均衡</li><li>客户端负载均衡</li></ul><h3 id="服务端负载均衡"><a href="#服务端负载均衡" class="headerlink" title="服务端负载均衡"></a>服务端负载均衡</h3><p>服务端负载均衡是最常见的负载均衡方式，其工作原理如下图。</p><img src="/2023/02/20/springcloud-ribbon/10122164F-0.png" class="" title="服务端负载均衡工作原理"><p>服务端负载均衡是在客户端和服务端之间建立一个独立的负载均衡服务器，该服务器既可以是硬件设备（例如 F5），也可以是软件（例如 Nginx）。这个负载均衡服务器维护了一份可用服务端清单，然后通过心跳机制来删除故障的服务端节点，以保证清单中的所有服务节点都是可以正常访问的。</p><p>当客户端发送请求时，该请求不会直接发送到服务端进行处理，而是全部交给负载均衡服务器，由负载均衡服务器按照某种算法（例如轮询、随机等），从其维护的可用服务清单中选择一个服务端，然后进行转发。</p><p>服务端负载均衡具有以下特点：</p><ul><li>需要建立一个独立的负载均衡服务器。</li><li>负载均衡是在客户端发送请求后进行的，因此客户端并不知道到底是哪个服务端提供的服务。</li><li>可用服务端清单存储在负载均衡服务器上。</li></ul><h3 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h3><p>相较于服务端负载均衡，客户端服务在均衡则是一个比较小众的概念。</p><p>客户端负载均衡的工作原理如下图。</p><img src="/2023/02/20/springcloud-ribbon/1012212Q4-1.png" class="" title="客户端负载均衡原理"><p>客户端负载均衡是将负载均衡逻辑以代码的形式封装到客户端上，即负载均衡器位于客户端。客户端通过服务注册中心（例如 Eureka Server）获取到一份服务端提供的可用服务清单。有了服务清单后，负载均衡器会在客户端发送请求前通过负载均衡算法选择一个服务端实例再进行访问，以达到负载均衡的目的；</p><p>客户端负载均衡也需要心跳机制去维护服务端清单的有效性，这个过程需要配合服务注册中心一起完成。</p><p>客户端负载均衡具有以下特点：</p><ul><li>负载均衡器位于客户端，不需要单独搭建一个负载均衡服务器。</li><li>负载均衡是在客户端发送请求前进行的，因此客户端清楚地知道是哪个服务端提供的服务。</li><li>客户端都维护了一份可用服务清单，而这份清单都是从服务注册中心获取的。</li></ul><p>Ribbon 就是一个基于 HTTP 和 TCP 的客户端负载均衡器，当我们将 Ribbon 和 Eureka 一起使用时，Ribbon 会从 Eureka Server（服务注册中心）中获取服务端列表，然后通过负载均衡策略将请求分摊给多个服务提供者，从而达到负载均衡的目的。</p><h2 id="Ribbon实现服务调用"><a href="#Ribbon实现服务调用" class="headerlink" title="Ribbon实现服务调用"></a>Ribbon实现服务调用</h2><p>Ribbon 可以与 RestTemplate（Rest 模板）配合使用，以实现微服务之间的调用。</p><p>RestTemplate 是 Spring 家族中的一个用于消费第三方 REST 服务的请求框架。RestTemplate 实现了对 HTTP 请求的封装，提供了一套模板化的服务调用方法。通过它，Spring 应用可以很方便地对各种类型的 HTTP 请求进行访问。</p><p>RestTemplate 针对各种类型的 HTTP 请求都提供了相应的方法进行处理，例如 HEAD、GET、POST、PUT、DELETE 等类型的 HTTP 请求，分别对应 RestTemplate 中的 headForHeaders()、getForObject()、postForObject()、put() 以及 delete() 方法。</p><p>Spring Cloud Ribbon 提供了一个 IRule 接口，该接口主要用来定义负载均衡策略，它有 7 个默认实现类，每一个实现类都是一种负载均衡策略。</p><table><thead><tr><th>序号</th><th>实现类</th><th>负载均衡策略</th></tr></thead><tbody><tr><td>1</td><td>RoundRobinRule</td><td>按照线性轮询策略，即按照一定的顺序依次选取服务实例</td></tr><tr><td>2</td><td>RandomRule</td><td>随机选取一个服务实例</td></tr><tr><td>3</td><td>RetryRule</td><td>按照 RoundRobinRule（轮询）的策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试（重试时获取服务的策略还是 RoundRobinRule 中定义的策略），如果超过指定时间依然没获取到服务实例则返回 null 。</td></tr><tr><td>4</td><td>WeightedResponseTimeRule</td><td>WeightedResponseTimeRule 是 RoundRobinRule 的一个子类，它对 RoundRobinRule 的功能进行了扩展。  根据平均响应时间，来计算所有服务实例的权重，响应时间越短的服务实例权重越高，被选中的概率越大。刚启动时，如果统计信息不足，则使用线性轮询策略，等信息足够时，再切换到 WeightedResponseTimeRule。</td></tr><tr><td>5</td><td>BestAvailableRule</td><td>继承自 ClientConfigEnabledRoundRobinRule。先过滤点故障或失效的服务实例，然后再选择并发量最小的服务实例。</td></tr><tr><td>6</td><td>AvailabilityFilteringRule</td><td>先过滤掉故障或失效的服务实例，然后再选择并发量较小的服务实例。</td></tr><tr><td>7</td><td>ZoneAvoidanceRule</td><td>默认的负载均衡策略，综合判断服务所在区域（zone）的性能和服务（server）的可用性，来选择服务实例。在没有区域的环境下，该策略与轮询（RandomRule）策略类似。</td></tr></tbody></table><h2 id="切换负载均衡策略"><a href="#切换负载均衡策略" class="headerlink" title="切换负载均衡策略"></a>切换负载均衡策略</h2><p>配置类 ConfigBean 中添加以下代码，将负载均衡策略切换为 RandomRule（随机）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// RandomRule 为随机策略</span>    <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="定制负载均衡策略"><a href="#定制负载均衡策略" class="headerlink" title="定制负载均衡策略"></a>定制负载均衡策略</h2><p>定义自己的策略类 MyRandomRule extends AbstractLoadBalancerRule </p><p>将我们定制的负载均衡策略实现类注入到容器中，代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySelfRibbonRuleConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//自定义 Ribbon 负载均衡策略</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyRandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自定义，随机选择某一个微服务，执行五次</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在主启动类上使用 @RibbonClient 注解让我们定制的负载均衡策略生效，代码如下。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token comment">//自定义 Ribbon 负载均衡策略在主启动类上使用 RibbonClient 注解，在该微服务启动时，就能自动去加载我们自定义的 Ribbon 配置类，从而是配置生效</span><span class="token comment">// name 为需要定制负载均衡策略的微服务名称（application name）</span><span class="token comment">// configuration 为定制的负载均衡策略的配置类，</span><span class="token comment">// 且官方文档中明确提出，该配置类不能在 ComponentScan 注解（SpringBootApplication 注解中包含了该注解）下的包或其子包中，即自定义负载均衡配置类不能在 net.biancheng.c 包及其子包下</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"MICROSERVICECLOUDPROVIDERDEPT"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MySelfRibbonRuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudConsumerDept80Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudConsumerDept80Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Eureka</title>
      <link href="/2023/02/17/springcloud-eureka/"/>
      <url>/2023/02/17/springcloud-eureka/</url>
      
        <content type="html"><![CDATA[<h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>Eureka 一词来源于古希腊词汇，是“发现了”的意思。在软件领域，Eureka 是 Netflix 公司开发的一款开源的服务注册与发现组件。</p><p>Spring Cloud 将 Eureka 与 Netflix 中的其他开源服务组件（例如 Ribbon、Feign 以及 Hystrix 等）一起整合进 Spring Cloud Netflix 模块中，整合后的组件全称为 Spring Cloud Netflix Eureka。</p><p>Eureka 是 Spring Cloud Netflix 模块的子模块，它是 Spring Cloud 对 Netflix Eureka 的二次封装，主要负责 Spring Cloud 的服务注册与发现功能。</p><p>Spring Cloud 使用 Spring Boot 思想为 Eureka 增加了自动化配置，开发人员只需要引入相关依赖和注解，就能将 Spring Boot 构建的微服务轻松地与 Eureka 进行整合。</p><h2 id="Eureka两大组件"><a href="#Eureka两大组件" class="headerlink" title="Eureka两大组件"></a>Eureka两大组件</h2><p>Eureka 采用 CS（Client/Server，客户端/服务器） 架构，它包括以下两大组件：</p><ul><li><strong>Eureka Server</strong>：Eureka 服务注册中心，主要用于提供服务注册功能。当微服务启动时，会将自己的服务注册到 Eureka Server。Eureka Server 维护了一个可用服务列表，存储了所有注册到 Eureka Server 的可用服务的信息，这些可用服务可以在 Eureka Server 的管理界面中直观看到。</li><li><strong>Eureka Client</strong>：Eureka 客户端，通常指的是微服务系统中各个微服务，主要用于和 Eureka Server 进行交互。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳（默认周期为 30 秒）。若 Eureka Server 在多个心跳周期内没有接收到某个 Eureka Client 的心跳，Eureka Server 将它从可用服务列表中移除（默认 90 秒）。</li></ul><h2 id="Eureka服务注册发现"><a href="#Eureka服务注册发现" class="headerlink" title="Eureka服务注册发现"></a>Eureka服务注册发现</h2><img src="/2023/02/17/springcloud-eureka/1010305209-0-16797205557751-16797205582612.png" class="" title="Eureka 服务注册与发现"><p>上图中共涉及到以下 3 个角色：</p><ul><li><strong>服务注册中心（Register Service）</strong>：它是一个 Eureka Server，用于提供服务注册和发现功能。</li><li><strong>服务提供者（Provider Service）</strong>：它是一个 Eureka Client，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。</li><li><strong>服务消费者（Consumer Service）</strong>：它是一个 Eureka Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><p>Eureka 实现服务注册与发现的流程如下：</p><ol><li>搭建一个 Eureka Server 作为服务注册中心；</li><li>服务提供者 Eureka Client 启动时，会把当前服务器的信息以服务名（spring.application.name）的方式注册到服务注册中心；</li><li>服务消费者 Eureka Client 启动时，也会向服务注册中心注册；</li><li>服务消费者还会获取一份可用服务列表，该列表中包含了所有注册到服务注册中心的服务信息（包括服务提供者和自身的信息）；</li><li>在获得了可用服务列表后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li></ol><p>服务注册中心（Eureka Server）所扮演的角色十分重要，它是服务提供者和服务消费者之间的桥梁。服务提供者只有将自己的服务注册到服务注册中心才可能被服务消费者调用，而服务消费者也只有通过服务注册中心获取可用服务列表后，才能调用所需的服务。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h3><p>配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>  <span class="token comment">#该 Module 的端口号</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称，</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#false表示不向注册中心注册自己。</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/ <span class="token comment">#单机版服务注册中心</span></code></pre><p>主启动类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">//开启 Eureka server,接受其他微服务的注册</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudEureka7001Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudEureka7001Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span> <span class="token comment">#服务端口号</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> microServiceCloudProviderDept  <span class="token comment">#微服务名称，对外暴漏的微服务名称，十分重要</span><span class="token comment">################################################## JDBC 通用配置  ##########################################</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token comment">#数据库登陆用户名</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> root        <span class="token comment">#数据库登陆密码</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/bianchengbang_jdbc       <span class="token comment">#数据库url</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver                  <span class="token comment">#数据库驱动</span><span class="token comment">############################### 不检查 spring.config.import=configserver:##################</span><span class="token comment">#  cloud:</span><span class="token comment">#    config:</span><span class="token comment">#      enabled: false</span><span class="token comment">###################################### MyBatis 配置 ######################################</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token comment"># 指定 mapper.xml 的位置</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>  <span class="token comment">#扫描实体类的位置,在此处指明扫描实体类的包，在 mapper.xml 中就可以不写实体类的全路径名</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> net.biancheng.c.entity  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#默认开启驼峰命名法，可以不用设置该属性</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">########################################### Spring cloud 自定义服务名称和 ip 地址###############################################</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#将客户端注册到 eureka 服务列表内</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka  <span class="token comment">#这个地址是 7001注册中心在 application.yml 中暴露出来额注册地址 （单机版）</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span><span class="token number">8001</span> <span class="token comment">#自定义服务名称信息</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#显示访问路径的 ip 地址</span><span class="token comment">########################################## spring cloud 使用 Spring Boot actuator 监控完善信息###################################</span><span class="token comment"># Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 heath 节点，本段配置（*）就是为了开启所有的节点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>   <span class="token comment"># * 在yaml 文件属于关键字，所以需要加引号</span><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">app.name</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>service<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>dept  <span class="token key atrule">company.name</span><span class="token punctuation">:</span> c.biancheng.net  <span class="token key atrule">build.aetifactId</span><span class="token punctuation">:</span> @project.artifactId@  <span class="token key atrule">build.version</span><span class="token punctuation">:</span> @project.version@</code></pre><p>主启动类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">// Spring cloud Eureka 客户端，自动将本服务注册到 Eureka Server 注册中心中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroServiceCloudProviderDept8001Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MicroServiceCloudProviderDept8001Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h2><p>默认情况下，如果 Eureka Server 在一段时间内（默认为 90 秒）没有接收到某个服务提供者（Eureka Client）的心跳，就会将这个服务提供者提供的服务从服务注册表中移除。 这样服务消费者就再也无法从服务注册中心中获取到这个服务了，更无法调用该服务。</p><p>但在实际的分布式微服务系统中，健康的服务（Eureka Client）也有可能会由于网络故障（例如网络延迟、卡顿、拥挤等原因）而无法与 Eureka Server 正常通讯。若此时 Eureka Server 因为没有接收心跳而误将健康的服务从服务列表中移除，这显然是不合理的。而 Eureka 的自我保护机制就是来解决此问题的。</p><p>所谓 “Eureka 的自我保护机制”，其中心思想就是“好死不如赖活着”。如果 Eureka Server 在一段时间内没有接收到 Eureka Client 的心跳，那么 Eureka Server 就会开启自我保护模式，将所有的 Eureka Client 的注册信息保护起来，而不是直接从服务注册表中移除。一旦网络恢复，这些 Eureka Client 提供的服务还可以继续被服务消费者消费。</p><p>综上，Eureka 的自我保护机制是一种应对网络异常的安全保护措施。它的架构哲学是：宁可同时保留所有微服务（健康的服务和不健康的服务都会保留）也不盲目移除任何健康的服务。通过 Eureka 的自我保护机制，可以让 Eureka Server 集群更加的健壮、稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
